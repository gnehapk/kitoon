// <reference path="../../../../typings/tsd.d.ts" />
var libs_1 = require('../../base/libs');
var ModalHelpers = require('../../modal/modal-helpers');
var BlockDeviceListController = (function () {
    function BlockDeviceListController($scope, $interval, $location, $modal, clusterSvc, blockDeviceSvc, requestSvc, requestTrackingSvc) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.$modal = $modal;
        this.clusterSvc = clusterSvc;
        this.blockDeviceSvc = blockDeviceSvc;
        this.requestSvc = requestSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.list = [];
        this.sizeUnits = ['GB', 'TB'];
        this.timer = this.$interval(function () { return _this.refresh(); }, 5000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.refresh();
        this.clusterSvc.getList().then(function (clusterlist) {
            _this.clusters = clusterlist;
        });
    }
    BlockDeviceListController.prototype.refresh = function () {
        var _this = this;
        if (this.clusterId) {
            this.blockDeviceSvc.getListByCluster(this.clusterId).then(function (blockdevices) {
                _this.loadData(blockdevices);
            });
        }
        else {
            this.blockDeviceSvc.getList().then(function (blockdevices) {
                _this.loadData(blockdevices);
            });
        }
    };
    BlockDeviceListController.prototype.loadData = function (blockdevices) {
        var _this = this;
        _.each(this.list, function (blockdevice) {
            blockdevice['updated'] = false;
        });
        _.each(blockdevices, function (blockdevice) {
            var item = _.find(_this.list, function (item) { return item.id === blockdevice.id; });
            if (item) {
                item.size = blockdevice.size;
                item['updated'] = true;
            }
            else {
                blockdevice['updated'] = true;
                _this.list.push(blockdevice);
            }
        });
        _.remove(this.list, function (blockdevice) { return !blockdevice['updated']; });
    };
    BlockDeviceListController.prototype.getFormatedSize = function (size) {
        return libs_1.numeral(size).format('0 b');
    };
    BlockDeviceListController.prototype.create = function () {
        this.$location.path('/storage/new').search({ type: 'block' });
    };
    BlockDeviceListController.prototype.showResizeForm = function (rbd) {
        rbd['resize'] = true;
        var sizeValue = rbd.size.substring(0, rbd.size.length - 2);
        var sizeUnit = rbd.size.substring(rbd.size.length - 2);
        var size = { value: parseInt(sizeValue), unit: sizeUnit };
        rbd['targetSize'] = size;
    };
    BlockDeviceListController.prototype.updateSize = function (rbd, newSize) {
        rbd['targetSize'] = newSize;
    };
    BlockDeviceListController.prototype.resize = function (rbd) {
        var _this = this;
        var targetSize = rbd['targetSize'];
        var size = { size: targetSize.value.toString() + targetSize.unit };
        this.blockDeviceSvc.resize(rbd.clusterid, rbd.storageid, rbd.id, size).then(function (task) {
            _this.requestSvc.get(task.data.taskid).then(function (result) {
                _this.requestTrackingSvc.add(result.id, result.name);
            });
        });
        rbd['resize'] = false;
    };
    BlockDeviceListController.prototype.cancelResize = function (rbd) {
        rbd['resize'] = false;
    };
    BlockDeviceListController.prototype.remove = function (rbd) {
        var _this = this;
        var modal = ModalHelpers.RemoveConfirmation(this.$modal, {});
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
            if (confirmed) {
                _this.blockDeviceSvc.remove(rbd.clusterid, rbd.storageid, rbd.id).then(function (task) {
                    _this.requestSvc.get(task.data.taskid).then(function (result) {
                        _this.requestTrackingSvc.add(result.id, result.name);
                    });
                });
            }
            $hide();
        });
    };
    BlockDeviceListController.prototype.createCluster = function () {
        this.$location.path('/clusters/new');
    };
    BlockDeviceListController.$inject = [
        '$scope',
        '$interval',
        '$location',
        '$modal',
        'ClusterService',
        'BlockDeviceService',
        'RequestService',
        'RequestTrackingService'
    ];
    return BlockDeviceListController;
})();
exports.BlockDeviceListController = BlockDeviceListController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
