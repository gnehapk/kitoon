// <reference path="../../../typings/tsd.d.ts" />
var ModalHelpers = require('../../modal/modal-helpers');
var libs_1 = require('../../base/libs');
var BlockDeviceController = (function () {
    function BlockDeviceController($routeParams, $location, $log, $q, $modal, clusterSvc, storageSvc, blockDeviceSvc, requestTrackingSvc, requestSvc) {
        var _this = this;
        this.$routeParams = $routeParams;
        this.$location = $location;
        this.$log = $log;
        this.$q = $q;
        this.$modal = $modal;
        this.clusterSvc = clusterSvc;
        this.storageSvc = storageSvc;
        this.blockDeviceSvc = blockDeviceSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.requestSvc = requestSvc;
        this.devicesToCreate = 1;
        this.targetSize = { value: 1, unit: 'GB' };
        this.sizeUnits = ['GB', 'TB'];
        this.useExistingPool = true;
        this.summary = false;
        this.devicesSize = 0;
        var clusterId = $routeParams['clusterid'];
        this.clusterSvc.get(clusterId).then(function (cluster) {
            _this.cluster = cluster;
            return _this.storageSvc.getListByCluster(_this.cluster.clusterid);
        }).then(function (pools) {
            _this.existingPools = [];
            _.each(pools, function (pool) {
                pool.capacity = {
                    total: pool.usage.total,
                    used: pool.usage.used
                };
                pool.utilization = {};
                if (pool.type === 'replicated') {
                    _this.existingPools.push(pool);
                }
            });
            if (_this.existingPools.length > 0) {
                _this.selectedPool = _this.existingPools[0];
                _this.processUtilization();
                _this.useExistingPool = true;
            }
            else {
                _this.useExistingPool = false;
            }
        });
        this.rbdList = [];
    }
    BlockDeviceController.prototype.processUtilization = function () {
        this.devicesSize = libs_1.numeral().unformat(this.targetSize.value + this.targetSize.unit) * this.devicesToCreate;
        if (this.devicesSize <= this.selectedPool.capacity.total) {
            var inUsePercent = Math.round((this.selectedPool.capacity.used / this.selectedPool.capacity.total) * 100);
            var toBeUsedPercent = Math.round((this.devicesSize / this.selectedPool.capacity.total) * 100);
            var remainingSize = this.selectedPool.capacity.total - this.selectedPool.capacity.used - this.devicesSize;
            var remainingPercent = 100 - inUsePercent - toBeUsedPercent;
            this.selectedPool.utilization.data = [
                { "used": inUsePercent, "color": "#00a8e1", "subtitle": "" },
                { "used": toBeUsedPercent, "color": "#3F9C35", "subtitle": libs_1.numeral(this.devicesSize).format('0.0 b') + " to be added" },
                { "used": remainingPercent, "color": "#EDEDED", "subtitle": libs_1.numeral(remainingSize).format('0.0 b') + " remaining" }
            ];
        }
    };
    BlockDeviceController.prototype.getDeviceNameList = function (deviceName, count) {
        var list = [];
        if (deviceName && deviceName.trim().length > 0) {
            for (var index = 1; index <= count; index++) {
                var suffix = count > 1 ? index : '';
                list.push(deviceName + suffix);
            }
        }
        return list;
    };
    BlockDeviceController.prototype.getBlockDeviceNames = function (deviceName, count) {
        if (count > 1) {
            return this.getDeviceNameList(deviceName, count).join(', ');
        }
        else {
            return null;
        }
    };
    BlockDeviceController.prototype.prepareSummary = function () {
        var _this = this;
        var list = this.getDeviceNameList(this.deviceName, this.devicesToCreate);
        _.each(list, function (device) {
            var rbd = {
                name: device,
                size: _this.targetSize
            };
            _this.rbdList.push(rbd);
        });
        this.summary = true;
    };
    BlockDeviceController.prototype.removeBlockDevice = function (deviceName) {
        _.remove(this.rbdList, function (rbd) { return rbd.name === deviceName; });
    };
    BlockDeviceController.prototype.cancel = function () {
        this.$location.path('/rbds/');
    };
    BlockDeviceController.prototype.submit = function () {
        var _this = this;
        var list = [];
        _.each(this.rbdList, function (rbd) {
            var blockdevice = {
                name: rbd.name,
                size: rbd.size.value + rbd.size.unit
            };
            list.push(_this.blockDeviceSvc.add(_this.cluster.clusterid, _this.selectedPool.storageid, blockdevice));
        });
        this.$q.all(list).then(function (tasks) {
            for (var _i = 0; _i < tasks.length; _i++) {
                var task = tasks[_i];
                _this.requestSvc.get(task.data.taskid).then(function (result) {
                    _this.requestTrackingSvc.add(result.id, result.name);
                });
            }
        });
        var modal = ModalHelpers.SuccessfulRequest(this.$modal, {
            title: 'Add Block Storage Request is Submitted',
            container: '.usmClientApp'
        });
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide) {
            $hide();
            _this.$location.path('/rbds/');
        });
    };
    BlockDeviceController.$inject = [
        '$routeParams',
        '$location',
        '$log',
        '$q',
        '$modal',
        'ClusterService',
        'StorageService',
        'BlockDeviceService',
        'RequestTrackingService',
        'RequestService'
    ];
    return BlockDeviceController;
})();
exports.BlockDeviceController = BlockDeviceController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
