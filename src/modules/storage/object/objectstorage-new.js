// <reference path="../../../typings/tsd.d.ts" />
var ModalHelpers = require('../../modal/modal-helpers');
var storage_util_1 = require('../storage-util');
var libs_1 = require('../../base/libs');
var ObjectStorageController = (function () {
    function ObjectStorageController($routeParams, $location, $log, $q, $modal, clusterSvc, storageProfileSvc, storageSvc, requestTrackingSvc, requestSvc) {
        var _this = this;
        this.$routeParams = $routeParams;
        this.$location = $location;
        this.$log = $log;
        this.$q = $q;
        this.$modal = $modal;
        this.clusterSvc = clusterSvc;
        this.storageProfileSvc = storageProfileSvc;
        this.storageSvc = storageSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.requestSvc = requestSvc;
        this.count = 1;
        this.types = ['Standard'];
        this.type = 'Standard';
        this.replicas = 3;
        this.ecprofiles = [{ k: 2, m: 1, text: '2+1', value: 'default' }, { k: 4, m: 2, text: '4+2', value: 'k4m2' }, { k: 6, m: 3, text: '6+3', value: 'k6m3' }, { k: 8, m: 4, text: '8+4', value: 'k8m4' }];
        this.ecprofile = this.ecprofiles[0];
        this.targetSize = 0;
        this.quota = { enabled: false, objects: { enabled: false, value: undefined }, percentage: { enabled: false, value: 75 } };
        this.pools = [];
        this.summary = false;
        if (this.poolWithRbd !== "true") {
            this.types.push('Erasure Coded');
        }
        var clusterId = $routeParams['clusterid'];
        this.clusterSvc.get(clusterId).then(function (cluster) {
            _this.cluster = cluster;
        });
        this.clusterSvc.getSlus(clusterId).then(function (slus) {
            _this.slus = slus;
            return _this.storageProfileSvc.getList();
        }).then(function (profiles) {
            // Here the storage profiles which doesn't have any OSDs will be ignored
            var profilesWithOSDs = _.groupBy(_this.slus, 'storageprofile');
            _this.profiles = _.filter(profiles, function (profile) { return profilesWithOSDs[profile.name]; });
            _this.profile = _this.profiles[0];
            _this.filterOSDs(_this.profile.name);
        });
    }
    ObjectStorageController.prototype.filterOSDs = function (storageprofile) {
        this.slusFiltered = _.filter(this.slus, function (osd) { return osd.storageprofile === storageprofile; });
        this.targetSize = storage_util_1.GetOptimalSizeForPGNum(this.pgs, this.slusFiltered, this.getReplicaCount());
    };
    // Replica count is required for Placement Groups calculations
    // In case of EC pools, replica would be the sum of k and m
    ObjectStorageController.prototype.getReplicaCount = function () {
        if (this.type === 'Standard') {
            return this.replicas;
        }
        else {
            return this.ecprofile.k + this.ecprofile.m;
        }
    };
    ObjectStorageController.prototype.changeStorageProfile = function (selectedProfile) {
        this.filterOSDs(selectedProfile.name);
    };
    ObjectStorageController.prototype.getQuotaPercentageSize = function (percent) {
        var val = parseInt(percent) || 0;
        return (val / 100) * this.targetSize;
    };
    ObjectStorageController.prototype.getQuotaTotalSize = function () {
        return this.targetSize;
    };
    ObjectStorageController.prototype.prepareSummary = function () {
        var pgNum = this.pgs;
        this.targetSize = storage_util_1.GetOptimalSizeForPGNum(pgNum, this.slusFiltered, this.getReplicaCount());
        if (this.count === 1) {
            var pool = {
                name: this.name,
                type: this.type,
                profile: this.profile,
                replicas: this.replicas,
                ecprofile: this.ecprofile,
                capacity: this.targetSize,
                quota: this.quota
            };
            this.pools.push(angular.copy(pool));
        }
        else {
            for (var index = 1; index <= this.count; index++) {
                var pool = {
                    name: this.name + index,
                    type: this.type,
                    profile: this.profile,
                    replicas: this.replicas,
                    ecprofile: this.ecprofile,
                    capacity: this.targetSize,
                    quota: this.quota
                };
                this.pools.push(angular.copy(pool));
            }
        }
        this.summary = true;
        if (this.poolWithRbd === "true") {
            this.poolName = this.name;
            this.prepareRbdSummary();
        }
    };
    ObjectStorageController.prototype.cancel = function () {
        this.$location.path('/storage');
    };
    ObjectStorageController.prototype.submit = function () {
        var _this = this;
        var list = [];
        for (var _i = 0, _a = this.pools; _i < _a.length; _i++) {
            var pool = _a[_i];
            var storage = {
                name: pool.name,
                profile: pool.profile.name,
                size: libs_1.numeral(pool.capacity).format('0b'),
                options: {}
            };
            if (pool.type === 'Standard') {
                storage['type'] = 'replicated';
                storage['replicas'] = pool.replicas;
            }
            else {
                storage['type'] = 'erasure_coded';
                storage.options['ecprofile'] = pool.ecprofile.value;
            }
            storage.options['pgnum'] = this.pgs.toString();
            if (pool.quota.enabled) {
                storage['quota_enabled'] = true;
                storage['quota_params'] = {};
                if (pool.quota.objects.enabled) {
                    storage['quota_params'].quota_max_objects = pool.quota.objects.value.toString();
                }
                if (pool.quota.percentage.enabled) {
                    storage['quota_params'].quota_max_bytes = Math.round((pool.quota.percentage.value / 100) * pool.capacity).toString();
                }
            }
            if (this.poolWithRbd === "true") {
                var rbdArray = _.map(this.rbdList, function (rbd) { return { name: rbd.name, size: rbd.size.value + rbd.size.unit }; });
                storage['blockdevices'] = rbdArray;
            }
            list.push(this.storageSvc.create(this.cluster.clusterid, storage));
        }
        this.$q.all(list).then(function (tasks) {
            for (var _i = 0; _i < tasks.length; _i++) {
                var task = tasks[_i];
                _this.requestSvc.get(task.data.taskid).then(function (result) {
                    _this.requestTrackingSvc.add(result.id, result.name);
                });
            }
        });
        var modal = ModalHelpers.SuccessfulRequest(this.$modal, {
            title: 'Add Object Storage Request is Submitted',
            container: '.usmClientApp'
        });
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide) {
            $hide();
            _this.$location.path('/storage');
        });
    };
    ObjectStorageController.$inject = [
        '$routeParams',
        '$location',
        '$log',
        '$q',
        '$modal',
        'ClusterService',
        'StorageProfileService',
        'StorageService',
        'RequestTrackingService',
        'RequestService'
    ];
    return ObjectStorageController;
})();
exports.ObjectStorageController = ObjectStorageController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
