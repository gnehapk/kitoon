/// <reference path="../../../../typings/tsd.d.ts" />
var ModalHelpers = require('../../modal/modal-helpers');
var ObjectStorageListController = (function () {
    function ObjectStorageListController($scope, $interval, $location, $log, $timeout, $q, $modal, clusterSvc, storageSvc, requestSvc, requestTrackingSvc, growl) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.$log = $log;
        this.$timeout = $timeout;
        this.$q = $q;
        this.$modal = $modal;
        this.clusterSvc = clusterSvc;
        this.storageSvc = storageSvc;
        this.requestSvc = requestSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.growl = growl;
        this.clusterMap = {};
        this.ecprofiles = [];
        this.ecprofiles['default'] = '2+1';
        this.ecprofiles['k4m2'] = '4+2';
        this.ecprofiles['k6m3'] = '6+3';
        this.ecprofiles['k8m4'] = '8+4';
        this.paramsObject = $location.search();
        if (Object.keys(this.paramsObject).length > 0) {
            if ("tab" in this.paramsObject) {
                delete this.paramsObject.tab;
            }
            this.updateSearchQuery(this.paramsObject);
        }
        this.timer = this.$interval(function () { return _this.refresh(); }, 60000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.refresh();
        this.clusterSvc.getList().then(function (clusterlist) {
            _this.clusters = clusterlist;
        });
    }
    ObjectStorageListController.prototype.isArray = function (data) {
        return data instanceof Array;
    };
    ObjectStorageListController.prototype.updateSearchQuery = function (paramsObject) {
        var _this = this;
        this.searchQuery = '';
        /*  paramsObject can have 3 case : -
                1) { status: [error,warning] , tab: <OSD,HOST,etc> }
                2) { tab: <OSD,HOST,etc> }
                3) { status: [error,warning] }
            and searchQuery will be like this : -
            /api/<ver>/clusters?status=ok&status=warning&tab=<HOST/OSD/etc>
        */
        Object.keys(paramsObject).forEach(function (value) {
            var joinedStr = "";
            if (paramsObject[value] instanceof Array) {
                var queryArray = paramsObject[value].map(function (status) {
                    return value + '=' + status;
                });
                joinedStr = queryArray.join('&');
            }
            else {
                joinedStr = value + "=" + paramsObject[value];
            }
            if (_this.searchQuery !== '') {
                _this.searchQuery += "&";
            }
            _this.searchQuery += joinedStr;
        });
    };
    ObjectStorageListController.prototype.clearSearchQuery = function (key, itemIndex) {
        if (itemIndex === null) {
            delete this.paramsObject[key];
        }
        else {
            this.paramsObject[key].splice(itemIndex, 1);
        }
        this.updateSearchQuery(this.paramsObject);
        this.refresh();
    };
    ObjectStorageListController.prototype.refresh = function () {
        var _this = this;
        if (this.clusterId) {
            // Current storage resource doesn't have cluster name, so here
            // we are fetching the cluster(s) in the system
            // This code will be removed once the storage resource includes
            // cluster name
            this.clusterSvc.get(this.clusterId).then(function (cluster) {
                _this.clusterMap[cluster.clusterid] = cluster;
                if (_this.searchQuery === '') {
                    return _this.storageSvc.getListByCluster(_this.clusterId);
                }
                else {
                    return _this.storageSvc.getFilteredListByCluster(_this.clusterId, _this.searchQuery);
                }
            }).then(function (list) {
                _this.loadData(list);
            });
        }
        else {
            this.clusterSvc.getList().then(function (clusters) {
                var requests = [];
                _.each(clusters, function (cluster) {
                    _this.clusterMap[cluster.clusterid] = cluster;
                });
                if (_this.searchQuery === '') {
                    return _this.storageSvc.getList();
                }
                else {
                    return _this.storageSvc.getFilteredList(_this.searchQuery);
                }
            }).then(function (list) {
                _this.loadData(list);
            });
        }
    };
    ObjectStorageListController.prototype.loadData = function (storages) {
        this.list = storages;
    };
    ObjectStorageListController.prototype.getClusterName = function (clusterid) {
        return this.clusterMap[clusterid].name;
    };
    ObjectStorageListController.prototype.create = function () {
        this.$location.path('/storage/new');
    };
    ObjectStorageListController.prototype.remove = function (storage) {
        var _this = this;
        var modal = ModalHelpers.RemoveConfirmation(this.$modal, {});
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
            if (confirmed) {
                _this.storageSvc.delete(storage.clusterid, storage.storageid).then(function (task) {
                    _this.requestSvc.get(task.data.taskid).then(function (result) {
                        _this.requestTrackingSvc.add(result.id, result.name);
                    });
                });
            }
            $hide();
        });
    };
    ObjectStorageListController.prototype.createCluster = function () {
        this.$location.path('/clusters/new');
    };
    ObjectStorageListController.prototype.isupdateNeed = function (storage, updatedStorage) {
        if (storage.replicas !== this.editPool.replicas || storage.quota_enabled !== updatedStorage.quota_enabled ||
            storage.quota_params.quota_max_bytes !== updatedStorage.quota_params.quota_max_bytes ||
            storage.quota_params.quota_max_objects !== updatedStorage.quota_params.quota_max_objects) {
            return true;
        }
    };
    ObjectStorageListController.prototype.update = function (storage) {
        var _this = this;
        var pool;
        pool = {
            quota_enabled: false,
            quota_params: {
                quota_max_bytes: "0",
                quota_max_objects: "0"
            }
        };
        pool.quota_enabled = this.editPool.quota_enabled;
        if (this.editPool.quota_enabled) {
            if (this.enable_quota_max_objects) {
                pool.quota_params.quota_max_objects = this.editPool.quota_params.quota_max_objects.toString();
            }
            if (this.enable_max_percentage) {
                pool.quota_params.quota_max_bytes = Math.round((this.maxPercentage / 100) * this.editPool.usage.total).toString();
            }
        }
        if (storage.type === 'replicated') {
            pool.replicas = this.editPool.replicas;
        }
        if (this.isupdateNeed(storage, pool)) {
            // PoolName should be update seperately... so that need to make two different calls*/
            this.storageSvc.update(storage.clusterid, storage.storageid, pool)
                .catch(function (error) {
                _this.growl.error("Cannot update pool" + storage.name);
            })
                .then(function (success) {
                if (!_this.updateName(storage)) {
                    _this.growl.success(storage.name + " update initiated");
                }
            });
        }
        else {
            this.updateName(storage);
        }
        this.timer = this.$interval(function () { return _this.refresh(); }, 60000);
    };
    ObjectStorageListController.prototype.updateName = function (storage) {
        var _this = this;
        if (storage.name != this.editPool.name) {
            var poolName = {
                name: this.editPool.name
            };
            this.storageSvc.update(storage.clusterid, storage.storageid, poolName).catch(function (error) {
                _this.growl.error("Cannot update pool name " + storage.name);
            }).then(function (success) {
                _this.growl.success(storage.name + " update initiated");
            });
            return true;
        }
        else {
            return false;
        }
    };
    ObjectStorageListController.prototype.edit = function (storage) {
        this.$interval.cancel(this.timer);
        this.timer = undefined;
        this.editPool = _.cloneDeep(storage);
        if (this.editPool.quota_params.quota_max_bytes) {
            this.enable_max_percentage = true;
            this.maxPercentage = Math.round((this.editPool.quota_params.quota_max_bytes / this.editPool.usage.total) * 100);
        }
        if (this.editPool.quota_params.quota_max_objects) {
            this.editPool.quota_params.quota_max_objects = parseInt(this.editPool.quota_params.quota_max_objects, 10);
            this.enable_quota_max_objects = true;
        }
    };
    ObjectStorageListController.$inject = [
        '$scope',
        '$interval',
        '$location',
        '$log',
        '$timeout',
        '$q',
        '$modal',
        'ClusterService',
        'StorageService',
        'RequestService',
        'RequestTrackingService',
        'growl'
    ];
    return ObjectStorageListController;
})();
exports.ObjectStorageListController = ObjectStorageListController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
