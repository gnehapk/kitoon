// <reference path="../../../typings/tsd.d.ts" />
var TARGET_PGS_PER_OSD = 200;
/*
* Deriving PG from Target Size
*
* If 0-5 OSDs, PG = 128
* If 5-10 OSDs, PG = 512
* If 10-20 OSDs, PG = 1024
* If 20-30 OSDs, PG = 2048
* If 30-40 OSDs, PG = 3072
* If >50 OSDs, use calculations below
*
* PG = (Target_PGs_per_OSD * Total_no_of_OSDs * Percent_Data) / Replica
* where,
* Target_PGs_per_OSD = 200
* Total_no_of_OSDs =  Total number of OSDs in the cluster
* Percent_Data = User_Requested_Size / Max_Allocation_Size
*   Max_Allocation_Size = ((Avg_OSD_size * Total_no_of_OSDs) / Replica) * Max_Utilization_Factor
*   Max_Utilization_Factor = 0.8
* Replica = Requested by the user
*/
function GetCephPGsForOSD(osds, targetAllocSize, replica) {
    if (osds.length <= 5) {
        return 128;
    }
    else if (osds.length <= 10) {
        return 512;
    }
    else if (osds.length <= 20) {
        return 1024;
    }
    else if (osds.length <= 30) {
        return 2048;
    }
    else if (osds.length <= 40) {
        return 3072;
    }
    else if (osds.length <= 50) {
        return 4096;
    }
    else {
        var avgOSDSize = getAvgOSDSize(osds);
        var maxAllocSize = ((avgOSDSize * osds.length) / replica) * 0.8;
        var percentData = targetAllocSize / maxAllocSize;
        var pgs = (TARGET_PGS_PER_OSD * osds.length * percentData) / replica;
        return nextTwosPow(pgs);
    }
}
exports.GetCephPGsForOSD = GetCephPGsForOSD;
function getAvgOSDSize(osds) {
    var totalsize = osds.reduce(function (size, osd) {
        return size + osd.storagedevicesize;
    }, 0);
    return totalsize / osds.length;
}
function nextTwosPow(val) {
    var count = 0;
    var newValue = 0;
    while (newValue < val) {
        newValue = Math.pow(2, count);
        count++;
    }
    return newValue;
}
function GetTwosPowList(min, max) {
    var list = [];
    var val = 0;
    var count = 0;
    while (val < max) {
        var val = Math.pow(2, count);
        if (val >= min && val <= max) {
            list.push(val);
        }
        count++;
    }
    return list;
}
exports.GetTwosPowList = GetTwosPowList;
function GetOptimalSizeForPGNum(pgs, osds, replica) {
    var avgOSDSize = getAvgOSDSize(osds);
    var maxAllocSize = ((avgOSDSize * osds.length) / replica) * 0.8;
    var targetAllocSize = ((pgs * replica) / (TARGET_PGS_PER_OSD * osds.length)) * maxAllocSize;
    return targetAllocSize;
}
exports.GetOptimalSizeForPGNum = GetOptimalSizeForPGNum;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvc3RvcmFnZS9zdG9yYWdlLXV0aWwudHMiXSwibmFtZXMiOlsiR2V0Q2VwaFBHc0Zvck9TRCIsImdldEF2Z09TRFNpemUiLCJuZXh0VHdvc1BvdyIsIkdldFR3b3NQb3dMaXN0IiwiR2V0T3B0aW1hbFNpemVGb3JQR051bSJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBRWpELElBQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBRS9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFrQkU7QUFFRiwwQkFBaUMsSUFBZ0IsRUFBRSxlQUF1QixFQUFFLE9BQWU7SUFDdkZBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ25CQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQTtJQUNmQSxDQUFDQTtJQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN6QkEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7SUFDZkEsQ0FBQ0E7SUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2hCQSxDQUFDQTtJQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN6QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDaEJBLENBQUNBO0lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3pCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJ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LEdBQUdBLEdBQUdBLENBQUNBO0lBQ2hFQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxrQkFBa0JBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLFlBQVlBLENBQUNBO0lBQzVGQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQTtBQUMzQkEsQ0FBQ0E7QUFMZSw4QkFBc0IseUJBS3JDLENBQUEiLCJmaWxlIjoibW9kdWxlcy9zdG9yYWdlL3N0b3JhZ2UtdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5jb25zdCBUQVJHRVRfUEdTX1BFUl9PU0QgPSAyMDA7XG5cbi8qXG4qIERlcml2aW5nIFBHIGZyb20gVGFyZ2V0IFNpemVcbipcbiogSWYgMC01IE9TRHMsIFBHID0gMTI4XG4qIElmIDUtMTAgT1NEcywgUEcgPSA1MTJcbiogSWYgMTAtMjAgT1NEcywgUEcgPSAxMDI0XG4qIElmIDIwLTMwIE9TRHMsIFBHID0gMjA0OFxuKiBJZiAzMC00MCBPU0RzLCBQRyA9IDMwNzJcbiogSWYgPjUwIE9TRHMsIHVzZSBjYWxjdWxhdGlvbnMgYmVsb3dcbipcbiogUEcgPSAoVGFyZ2V0X1BHc19wZXJfT1NEICogVG90YWxfbm9fb2ZfT1NEcyAqIFBlcmNlbnRfRGF0YSkgLyBSZXBsaWNhXG4qIHdoZXJlLFxuKiBUYXJnZXRfUEdzX3Blcl9PU0QgPSAyMDBcbiogVG90YWxfbm9fb2ZfT1NEcyA9ICBUb3RhbCBudW1iZXIgb2YgT1NEcyBpbiB0aGUgY2x1c3RlclxuKiBQZXJjZW50X0RhdGEgPSBVc2VyX1JlcXVlc3RlZF9TaXplIC8gTWF4X0FsbG9jYXRpb25fU2l6ZVxuKiAgIE1heF9BbGxvY2F0aW9uX1NpemUgPSAoKEF2Z19PU0Rfc2l6ZSAqIFRvdGFsX25vX29mX09TRHMpIC8gUmVwbGljYSkgKiBNYXhfVXRpbGl6YXRpb25fRmFjdG9yXG4qICAgTWF4X1V0aWxpemF0aW9uX0ZhY3RvciA9IDAuOFxuKiBSZXBsaWNhID0gUmVxdWVzdGVkIGJ5IHRoZSB1c2VyXG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gR2V0Q2VwaFBHc0Zvck9TRChvc2RzOiBBcnJheTxhbnk+LCB0YXJnZXRBbGxvY1NpemU6IG51bWJlciwgcmVwbGljYTogbnVtYmVyKSB7XG4gICAgaWYgKG9zZHMubGVuZ3RoIDw9IDUpIHtcbiAgICAgICAgcmV0dXJuIDEyODtcbiAgICB9XG4gICAgZWxzZSBpZiAob3Nkcy5sZW5ndGggPD0gMTApIHtcbiAgICAgICAgcmV0dXJuIDUxMjtcbiAgICB9XG4gICAgZWxzZSBpZiAob3Nkcy5sZW5ndGggPD0gMjApIHtcbiAgICAgICAgcmV0dXJuIDEwMjQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9zZHMubGVuZ3RoIDw9IDMwKSB7XG4gICAgICAgIHJldHVybiAyMDQ4O1xuICAgIH1cbiAgICBlbHNlIGlmIChvc2RzLmxlbmd0aCA8PSA0MCkge1xuICAgICAgICByZXR1cm4gMzA3MjtcbiAgICB9XG4gICAgZWxzZSBpZiAob3Nkcy5sZW5ndGggPD0gNTApIHtcbiAgICAgICAgcmV0dXJuIDQwOTY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYXZnT1NEU2l6ZSA9IGdldEF2Z09TRFNpemUob3Nkcyk7XG4gICAgICAgIHZhciBtYXhBbGxvY1NpemUgPSAoKGF2Z09TRFNpemUgKiBvc2RzLmxlbmd0aCkgLyByZXBsaWNhKSAqIDAuODtcbiAgICAgICAgdmFyIHBlcmNlbnREYXRhID0gdGFyZ2V0QWxsb2NTaXplIC8gbWF4QWxsb2NTaXplO1xuICAgICAgICB2YXIgcGdzID0gKFRBUkdFVF9QR1NfUEVSX09TRCAqIG9zZHMubGVuZ3RoICogcGVyY2VudERhdGEpIC8gcmVwbGljYTtcbiAgICAgICAgcmV0dXJuIG5leHRUd29zUG93KHBncyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRBdmdPU0RTaXplKG9zZHM6IEFycmF5PGFueT4pIHtcbiAgICB2YXIgdG90YWxzaXplID0gb3Nkcy5yZWR1Y2UoKHNpemUsIG9zZCkgPT4ge1xuICAgICAgICByZXR1cm4gc2l6ZSArIG9zZC5zdG9yYWdlZGV2aWNlc2l6ZTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm4gdG90YWxzaXplIC8gb3Nkcy5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG5leHRUd29zUG93KHZhbDogbnVtYmVyKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgbmV3VmFsdWUgPSAwO1xuICAgIHdoaWxlIChuZXdWYWx1ZSA8IHZhbCkge1xuICAgICAgICBuZXdWYWx1ZSA9IE1hdGgucG93KDIsIGNvdW50KTtcbiAgICAgICAgY291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gR2V0VHdvc1Bvd0xpc3QobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyW10ge1xuICAgIHZhciBsaXN0ID0gW107XG4gICAgdmFyIHZhbCA9IDA7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB3aGlsZSAodmFsIDwgbWF4KSB7XG4gICAgICAgIHZhciB2YWwgPSBNYXRoLnBvdygyLCBjb3VudClcbiAgICAgICAgaWYgKHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgY291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBHZXRPcHRpbWFsU2l6ZUZvclBHTnVtKHBnczogbnVtYmVyLCBvc2RzOiBhbnlbXSwgcmVwbGljYTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB2YXIgYXZnT1NEU2l6ZSA9IGdldEF2Z09TRFNpemUob3Nkcyk7XG4gICAgdmFyIG1heEFsbG9jU2l6ZSA9ICgoYXZnT1NEU2l6ZSAqIG9zZHMubGVuZ3RoKSAvIHJlcGxpY2EpICogMC44O1xuICAgIHZhciB0YXJnZXRBbGxvY1NpemUgPSAoKHBncyAqIHJlcGxpY2EpIC8gKFRBUkdFVF9QR1NfUEVSX09TRCAqIG9zZHMubGVuZ3RoKSkgKiBtYXhBbGxvY1NpemU7XG4gICAgcmV0dXJuIHRhcmdldEFsbG9jU2l6ZTtcbn1cbiJdfQ==
