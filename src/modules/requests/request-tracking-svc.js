/// <reference path="../../../typings/tsd.d.ts" />
var IDBStore = require('idb-wrapper');
var RequestTrackingService = (function () {
    function RequestTrackingService($q, $log, $timeout, requestSvc, growl) {
        var _this = this;
        this.$q = $q;
        this.$log = $log;
        this.$timeout = $timeout;
        this.requestSvc = requestSvc;
        this.growl = growl;
        this.id = 0;
        this.timer = 5000;
        this.id = this.id + 1;
        this.$log.debug('Creating Request Tracking Service [' + this.id + ']');
        this.requests = new IDBStore({
            dbVersion: 1,
            storeName: 'UserRequest',
            keyPath: 'id',
            autoIncrement: false,
            onStoreReady: function () {
                _this.$log.info('UserRequest store is ready!');
                _this.timeout = $timeout(function () { return _this.processRequests(); }, _this.timer);
            },
            onError: function () {
                _this.$log.error('Unable to create UserRequest store');
            }
        });
    }
    RequestTrackingService.prototype.add = function (id, operation) {
        var _this = this;
        var d = this.$q.defer();
        if (id === null || id === undefined) {
            // resolve empty ids immediately
            d.resolve();
        }
        else {
            this.requests.put({
                id: id,
                operation: operation,
                local: true,
                timestamp: Date.now()
            }, function (id) {
                _this.$log.info('Tracking new request ' + id);
                d.resolve(id);
            }, function (error) {
                _this.$log.error('Error inserting request ' + id + ' error: ' + error);
                d.reject(error);
            });
        }
        return d.promise;
    };
    RequestTrackingService.prototype.remove = function (id) {
        var _this = this;
        var d = this.$q.defer();
        this.requests.remove(id, d.resolve, d.reject);
        d.promise.then(function (id) {
            _this.$log.info('Removed request id ' + id);
        }, function (error) {
            _this.$log.error('Error in removing request id ' + id);
        });
        return d.promise;
    };
    RequestTrackingService.prototype.getTrackedRequests = function () {
        var d = this.$q.defer();
        this.requests.getAll(d.resolve, d.reject);
        return d.promise;
    };
    RequestTrackingService.prototype.getLength = function () {
        var d = this.$q.defer();
        this.requests.count(d.resolve, d.reject);
        return d.promise;
    };
    RequestTrackingService.prototype.processRequests = function () {
        var _this = this;
        this.$log.debug('Refreshing the requests in the store');
        this.getTrackedRequests().then(function (requests) {
            _.each(requests, function (trackedRequest) {
                _this.requestSvc.get(trackedRequest.id).then(function (task) {
                    if (task.completed) {
                        if (task.status === 1) {
                            _this.showNotification(trackedRequest.operation + ' is completed sucessfully');
                            _this.$log.info(trackedRequest.operation + ' is completed sucessfully');
                        }
                        else if (task.status === 2) {
                            _this.showError(trackedRequest.operation + ' is timed out');
                            _this.$log.error(trackedRequest.operation + ' is timed out');
                        }
                        else if (task.status === 3) {
                            _this.showError(trackedRequest.operation + ' is failed');
                            _this.$log.error(trackedRequest.operation + ' is failed');
                        }
                        _this.remove(trackedRequest.id);
                    }
                    else if (!task.completed) {
                        _this.$log.info('Request ' + trackedRequest.id + ' is in progress');
                    }
                }, function (resp) {
                    if (resp.status === 404) {
                        _this.$log.warn('Request ' + trackedRequest.id + ' NOT FOUND');
                        _this.remove(trackedRequest.id);
                    }
                });
            });
        });
        this.timeout = this.$timeout(function () { return _this.processRequests(); }, this.timer);
    };
    RequestTrackingService.prototype.showError = function (msg) {
        // TODO: too tightly coupled use $broadcast
        this.growl.error('ERROR: ' + msg, {
            ttl: -1
        });
    };
    RequestTrackingService.prototype.showNotification = function (msg) {
        // TODO: too tightly coupled use $broadcast
        this.growl.success(msg);
    };
    RequestTrackingService.$inject = ['$q', '$log', '$timeout', 'RequestService', 'growl'];
    return RequestTrackingService;
})();
exports.RequestTrackingService = RequestTrackingService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
