/// <reference path="../../../typings/tsd.d.ts" />
var idbWrapper = require('idb-wrapper');
var RequestsController = (function () {
    function RequestsController($scope, $interval, $timeout, $location, $log, $modal, serverSvc, utilSvc, eventsvc, requestSvc, sysSvc, configSvc, requestTrackingSvc, userSvc) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$timeout = $timeout;
        this.$location = $location;
        this.$log = $log;
        this.$modal = $modal;
        this.serverSvc = serverSvc;
        this.utilSvc = utilSvc;
        this.eventsvc = eventsvc;
        this.requestSvc = requestSvc;
        this.sysSvc = sysSvc;
        this.configSvc = configSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.userSvc = userSvc;
        this.getAbout();
        this.events = [];
        this.tasks = {};
        this.discoveredHostsLength = 0;
        this.discoveredHosts = [];
        this.openWebSocket();
        this.loadEvents();
        this.$interval(function () { return _this.reloadDiscoveredHosts(); }, 12000);
        this.$interval(function () { return _this.reloadTasks(); }, 5000);
    }
    //Open WebSocket connection 
    RequestsController.prototype.openWebSocket = function () {
        var _this = this;
        if ("WebSocket" in window) {
            var ws;
            if (this.$location.protocol() === "https") {
                ws = new WebSocket("wss://" + this.$location.host() + ":8081/ws");
            }
            else {
                ws = new WebSocket("ws://" + this.$location.host() + ":8081/ws");
            }
            ws.onopen = function () {
                _this.$log.info("WebSocket Connection is Started!");
            };
            ws.onmessage = function (evt) {
                if (evt.data.length > 0) {
                    _this.events.unshift(JSON.parse(evt.data));
                    _this.events = _.filter(_this.events, function (obj) {
                        return obj["severity"] < 5;
                    });
                }
            };
            ws.onclose = function () {
                _this.$log.info("WebSocket Connection is Closed!");
                //fall back to periodic poll
                _this.$interval(function () { return _this.loadEvents(); }, 10000);
            };
        }
        else {
            this.$log.info("WebSocket is not supported by your Browser!");
            //fall back to periodic poll
            this.$interval(function () { return _this.loadEvents(); }, 10000);
        }
    };
    RequestsController.prototype.loadEvents = function () {
        var _this = this;
        this.eventsvc.getList({
            "severity": ['minor', 'warning', 'indeterminate', 'critical', 'major'],
            "acked": "false"
        }).then(function (events) {
            _this.events = _.uniq(events.events, 'event_id');
        });
    };
    RequestsController.prototype.reloadTasks = function () {
        var _this = this;
        this.requestTrackingSvc.getTrackedRequests().then(function (tasks) {
            _this.tasks = _.filter(tasks, function (task) { return !task.done; });
        });
    };
    RequestsController.prototype.viewTasks = function () {
        this.$location.path('/tasks');
    };
    RequestsController.prototype.logoutUser = function () {
        this.userSvc.logout().then(function (logout) {
            document.location.href = '';
        });
    };
    RequestsController.prototype.reloadDiscoveredHosts = function () {
        var _this = this;
        this.discoveredHosts = _.filter(this.discoveredHosts, function (host) {
            return host.state !== "ACCEPTED" && host.state !== "UNACCEPTED";
        });
        this.serverSvc.getDiscoveredHosts().then(function (freeHosts) {
            _this.discoveredHostsLength = freeHosts.length;
            _.each(freeHosts, function (freeHost) {
                var host = {
                    hostname: freeHost.hostname,
                    saltfingerprint: freeHost.saltfingerprint,
                    state: "UNACCEPTED",
                    selected: false
                };
                var isPresent = false;
                isPresent = _.some(_this.discoveredHosts, function (dHost) {
                    return dHost.hostname === host.hostname;
                });
                if (!isPresent) {
                    _this.discoveredHosts.push(host);
                }
            });
        });
    };
    RequestsController.prototype.acceptHost = function (host) {
        var _this = this;
        var saltfingerprint = {
            saltfingerprint: host.saltfingerprint
        };
        this.utilSvc.acceptHost(host.hostname, saltfingerprint).then(function (result) {
            _this.$log.info(result);
            host.state = "ACCEPTING";
            host.taskid = result.data.taskid;
            _this.requestSvc.get(host.taskid).then(function (task) {
                _this.requestTrackingSvc.add(host.taskid, task.name);
            });
            var self = _this;
            var callback = function () {
                self.requestSvc.get(host.taskid).then(function (task) {
                    if (task.completed && task.status == 1) {
                        self.$log.info('Accepted host in first controller ' + host.hostname);
                        host.state = "ACCEPTED";
                        host.task = undefined;
                    }
                    else if (task.completed && task.status == 2) {
                        self.$log.info('Failed to accept host in first controller ' + host.hostname);
                        host.state = "UNACCEPTED";
                        host.task = undefined;
                    }
                    else {
                        self.$log.info('Accepting host in first controller ' + host.hostname);
                        self.$timeout(callback, 5000);
                    }
                });
            };
            _this.$timeout(callback, 5000);
        });
    };
    RequestsController.prototype.openDiscoveredHostsModel = function () {
        this.$modal({ scope: this.$scope, template: 'views/hosts/discovered-hosts.html', show: true });
    };
    RequestsController.prototype.mySettings = function () {
        this.$modal({ scope: this.$scope, template: 'views/admin/my-settings.html', show: true });
    };
    RequestsController.prototype.openAboutModal = function () {
        this.$modal({ scope: this.$scope, template: 'views/base/about-modal.html', show: true });
    };
    RequestsController.prototype.acceptAllHosts = function () {
        var _this = this;
        _.each(this.discoveredHosts, function (host) {
            if (host.state === "UNACCEPTED") {
                _this.acceptHost(host);
            }
        });
    };
    RequestsController.prototype.getAbout = function () {
        var _this = this;
        this.sysSvc.getAboutDetails().then(function (aboutDetails) {
            _this.about = aboutDetails;
            return _this.configSvc.getConfig();
        }).then(function (config) {
            _this.about.copyright = config.copyright;
        });
    };
    RequestsController.$inject = [
        '$scope',
        '$interval',
        '$timeout',
        '$location',
        '$log',
        '$modal',
        'ServerService',
        'UtilService',
        'EventService',
        'RequestService',
        'SystemService',
        'ConfigService',
        'RequestTrackingService',
        'UserService'];
    return RequestsController;
})();
exports.RequestsController = RequestsController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
