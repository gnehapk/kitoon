// <reference path="../../../typings/tsd.d.ts" />
var TaskDetailController = (function () {
    function TaskDetailController($scope, $interval, routeParamsSvc, requestSvc) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.routeParamsSvc = routeParamsSvc;
        this.requestSvc = requestSvc;
        if (this.taskId === undefined) {
            this.taskId = this.routeParamsSvc['taskId'];
        }
        this.timer = this.$interval(function () { return _this.refresh(); }, 5000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.refresh();
    }
    TaskDetailController.prototype.refresh = function () {
        var _this = this;
        this.requestSvc.get(this.taskId).then(function (task) {
            _this.detail = task;
            if (task.completed == true) {
                _this.$interval.cancel(_this.timer);
            }
            if (task.subtasks.length > 0) {
                _this.requestSvc.getSubTasks(task.id).then(function (subtasks) {
                    _this.subTasks = subtasks;
                });
            }
        });
    };
    TaskDetailController.$inject = [
        '$scope',
        '$interval',
        '$routeParams',
        'RequestService'
    ];
    return TaskDetailController;
})();
exports.TaskDetailController = TaskDetailController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvdGFza3MvdGFzay1kZXRhaWwtY29udHJvbGxlci50cyJdLCJuYW1lcyI6WyJUYXNrRGV0YWlsQ29udHJvbGxlciIsIlRhc2tEZXRhaWxDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiVGFza0RldGFpbENvbnRyb2xsZXIucmVmcmVzaCJdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBSWpEO0lBWUlBLDhCQUNZQSxNQUFpQkEsRUFDakJBLFNBQThCQSxFQUM5QkEsY0FBNENBLEVBQzVDQSxVQUEwQkE7UUFoQjFDQyxpQkF3Q0NBO1FBM0JlQSxXQUFNQSxHQUFOQSxNQUFNQSxDQUFXQTtRQUNqQkEsY0FBU0EsR0FBVEEsU0FBU0EsQ0FBcUJBO1FBQzlCQSxtQkFBY0EsR0FBZEEsY0FBY0EsQ0FBOEJBO1FBQzVDQSxlQUFVQSxHQUFWQSxVQUFVQSxDQUFnQkE7UUFDbENBLEVBQUVBLENBQUFBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEtBQUtBLFNBQVNBLENBQUNBLENBQUFBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBTUEsT0FBQUEsS0FBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsRUFBZEEsQ0FBY0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLEVBQUVBO1lBQ3hCQSxLQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUN0Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSEEsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDbkJBLENBQUNBO0lBRU1ELHNDQUFPQSxHQUFkQTtRQUFBRSxpQkFZQ0E7UUFYR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsSUFBSUE7WUFDdENBLEtBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1lBQ25CQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDdkJBLEtBQUlBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQ3RDQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxHQUFFQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtnQkFDeEJBLEtBQUlBLENBQUNBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBO29CQUM5Q0EsS0FBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7Z0JBQzdCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtRQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQWpDTUYsNEJBQU9BLEdBQWtCQTtRQUM1QkEsUUFBUUE7UUFDUkEsV0FBV0E7UUFDWEEsY0FBY0E7UUFDZEEsZ0JBQWdCQTtLQUNuQkEsQ0FBQ0E7SUE2Qk5BLDJCQUFDQTtBQUFEQSxDQXhDQSxBQXdDQ0EsSUFBQTtBQXhDWSw0QkFBb0IsdUJBd0NoQyxDQUFBIiwiZmlsZSI6Im1vZHVsZXMvdGFza3MvdGFzay1kZXRhaWwtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5pbXBvcnQge1JlcXVlc3RTZXJ2aWNlfSBmcm9tICcuLi9yZXN0L3JlcXVlc3QnO1xuXG5leHBvcnQgY2xhc3MgVGFza0RldGFpbENvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgbGlzdDogQXJyYXk8YW55PjtcbiAgICBwcml2YXRlIHRpbWVyO1xuICAgIHByaXZhdGUgdGFza0lkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXRhaWw6IGFueTtcbiAgICBwcml2YXRlIHN1YlRhc2tzOiBBcnJheTxhbnk+O1xuICAgIHN0YXRpYyAkaW5qZWN0OiBBcnJheTxzdHJpbmc+ID0gW1xuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRpbnRlcnZhbCcsXG4gICAgICAgICckcm91dGVQYXJhbXMnLFxuICAgICAgICAnUmVxdWVzdFNlcnZpY2UnXG4gICAgXTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSAkc2NvcGU6IG5nLklTY29wZSxcbiAgICAgICAgcHJpdmF0ZSAkaW50ZXJ2YWw6IG5nLklJbnRlcnZhbFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcm91dGVQYXJhbXNTdmM6IG5nLnJvdXRlLklSb3V0ZVBhcmFtc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcmVxdWVzdFN2YzogUmVxdWVzdFNlcnZpY2UpIHtcbiAgICAgICAgaWYodGhpcy50YXNrSWQgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLnRhc2tJZCA9IHRoaXMucm91dGVQYXJhbXNTdmNbJ3Rhc2tJZCddO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXIgPSB0aGlzLiRpbnRlcnZhbCgoKSA9PiB0aGlzLnJlZnJlc2goKSwgNTAwMCk7XG4gICAgICAgIHRoaXMuJHNjb3BlLiRvbignJGRlc3Ryb3knLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy50aW1lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVmcmVzaCgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0U3ZjLmdldCh0aGlzLnRhc2tJZCkudGhlbih0YXNrID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsID0gdGFzaztcbiAgICAgICAgICAgIGlmKHRhc2suY29tcGxldGVkID09IHRydWUpe1xuICAgICAgICAgICAgICAgIHRoaXMuJGludGVydmFsLmNhbmNlbCh0aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRhc2suc3VidGFza3MubGVuZ3RoID4wKXtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RTdmMuZ2V0U3ViVGFza3ModGFzay5pZCkudGhlbihzdWJ0YXNrcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3ViVGFza3MgPSBzdWJ0YXNrcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
