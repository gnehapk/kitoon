// <reference path="../../../typings/tsd.d.ts" />
var TaskListController = (function () {
    function TaskListController($scope, $interval, $location, requestSvc) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.requestSvc = requestSvc;
        this.pageNo = 1;
        this.pageSize = 20;
        this.totalPages = 1;
        this.taskStatus = ['Inprogress', 'Completed', 'Failed'];
        this.totalCount = 0;
        this.selectedStatus = [];
        this.filterObject = {};
        this.timer = this.$interval(function () { return _this.refresh(); }, 5000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.refresh();
    }
    TaskListController.prototype.refresh = function () {
        var _this = this;
        this.requestSvc.getList(this.pageNo, this.pageSize, this.selectedStatus, this.fromDateTimeFilter, this.toDateTimeFilter, this.searchQuery).then(function (data) {
            _this.totalCount = data.totalcount;
            _this.totalPages = Math.ceil(data.totalcount / _this.pageSize);
            _this.loadData(data.tasks);
        });
    };
    TaskListController.prototype.paginate = function (pageNo) {
        if (pageNo < 1 || pageNo > this.totalPages)
            return;
        this.pageNo = pageNo;
        this.refresh();
    };
    TaskListController.prototype.loadData = function (tasks) {
        var list = [];
        _.each(tasks, function (task) {
            var firstStatus = _.first(task.statuslist);
            if (firstStatus) {
                task.timestamp = firstStatus.Timestamp;
            }
            list.push(task);
        });
        this.list = list;
    };
    TaskListController.prototype.viewDetails = function (taskId) {
        this.$location.path('/tasks/' + taskId);
    };
    TaskListController.prototype.toggleSelection = function (status) {
        var idx = this.selectedStatus.indexOf(status);
        if (idx > -1) {
            this.selectedStatus.splice(idx, 1);
        }
        else {
            this.selectedStatus.push(status);
        }
        this.filterObject["status"] = this.selectedStatus;
        this.refresh();
    };
    TaskListController.prototype.applyFilter = function (key, value) {
        if (value.length === 0) {
            delete this.filterObject[key];
        }
        else {
            this.filterObject[key] = value;
        }
        this.refresh();
    };
    TaskListController.prototype.resetFilters = function () {
        delete this.filterObject["from"];
        delete this.filterObject["to"];
        delete this.filterObject["search"];
        this.filterObject["status"] = [];
        this.fromDateTimeFilter = this.filterObject["from"];
        this.toDateTimeFilter = this.filterObject["to"];
        this.selectedStatus = this.filterObject["status"];
        this.searchQuery = this.filterObject["search"];
    };
    TaskListController.prototype.clearFilter = function (key) {
        if (key === "status") {
            this.filterObject[key] = [];
        }
        else {
            delete this.filterObject[key];
        }
        this.fromDateTimeFilter = this.filterObject["from"];
        this.toDateTimeFilter = this.filterObject["to"];
        this.selectedStatus = this.filterObject["status"];
        this.searchQuery = this.filterObject["search"];
    };
    TaskListController.$inject = [
        '$scope',
        '$interval',
        '$location',
        'RequestService'
    ];
    return TaskListController;
})();
exports.TaskListController = TaskListController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
