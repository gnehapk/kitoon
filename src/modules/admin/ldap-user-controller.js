var LdapUserController = (function () {
    function LdapUserController($location, UserService) {
        this.$location = $location;
        this.UserService = UserService;
        this.pageNo = 1;
        this.pageSize = 10;
        this.totalPages = 1;
        this.search = "";
        this.getUsers();
        this.getLdapUsers();
    }
    LdapUserController.prototype.getLdapUsers = function () {
        var _this = this;
        this.UserService.getLdapUsersPage(this.search, this.pageNo, this.pageSize).then(function (data) {
            _this.userList = data.users;
            _this.totalPages = Math.ceil(data.totalcount / _this.pageSize);
            var diff = _.difference(_.pluck(_this.userList, "username"), _.pluck(_this.allUserList, "username"));
            _this.userList = _.filter(_this.userList, function (obj) {
                var index = diff.indexOf(obj.username);
                if (index >= 0) {
                    obj.imported = false;
                }
                return true;
            });
        });
    };
    LdapUserController.prototype.getUsers = function () {
        var _this = this;
        this.UserService.getUsers().then(function (users) {
            _this.allUserList = users;
        });
    };
    LdapUserController.prototype.addLdapUser = function (user) {
        this.UserService.addUser(user).then(function (user) {
        });
    };
    LdapUserController.prototype.paginate = function (pageNo) {
        if (pageNo < 1 || pageNo > this.totalPages)
            return;
        this.pageNo = pageNo;
        this.getLdapUsers();
    };
    LdapUserController.prototype.cancel = function () {
        this.$location.path('/admin');
    };
    LdapUserController.$inject = [
        '$location',
        'UserService',
    ];
    return LdapUserController;
})();
exports.LdapUserController = LdapUserController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvYWRtaW4vbGRhcC11c2VyLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOlsiTGRhcFVzZXJDb250cm9sbGVyIiwiTGRhcFVzZXJDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiTGRhcFVzZXJDb250cm9sbGVyLmdldExkYXBVc2VycyIsIkxkYXBVc2VyQ29udHJvbGxlci5nZXRVc2VycyIsIkxkYXBVc2VyQ29udHJvbGxlci5hZGRMZGFwVXNlciIsIkxkYXBVc2VyQ29udHJvbGxlci5wYWdpbmF0ZSIsIkxkYXBVc2VyQ29udHJvbGxlci5jYW5jZWwiXSwibWFwcGluZ3MiOiJBQUVBO0lBY0lBLDRCQUNZQSxTQUE4QkEsRUFDOUJBLFdBQXdCQTtRQUR4QkMsY0FBU0EsR0FBVEEsU0FBU0EsQ0FBcUJBO1FBQzlCQSxnQkFBV0EsR0FBWEEsV0FBV0EsQ0FBYUE7UUFaNUJBLFdBQU1BLEdBQUdBLENBQUNBLENBQUNBO1FBQ1hBLGFBQVFBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2RBLGVBQVVBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2ZBLFdBQU1BLEdBQUdBLEVBQUVBLENBQUNBO1FBVWhCQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNoQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7SUFDeEJBLENBQUNBO0lBRU1ELHlDQUFZQSxHQUFuQkE7UUFBQUUsaUJBYUNBO1FBWkdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBQ0EsSUFBUUE7WUFDbkZBLEtBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQzNCQSxLQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMzREEsSUFBSUEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkdBLEtBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLEtBQUlBLENBQUNBLFFBQVFBLEVBQUVBLFVBQVNBLEdBQUdBO2dCQUNoRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDdkMsRUFBRSxDQUFBLENBQUMsS0FBSyxJQUFJLENBQUUsQ0FBQyxDQUFBLENBQUM7b0JBQ1osR0FBRyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLENBQUM7Z0JBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQ0EsQ0FBQ0E7UUFDWkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFS0YscUNBQVFBLEdBQWZBO1FBQUFHLGlCQUlFQTtRQUhHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxLQUFLQTtZQUNuQ0EsS0FBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDN0JBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRU1ILHdDQUFXQSxHQUFsQkEsVUFBbUJBLElBQUlBO1FBQ25CSSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFDQSxJQUFJQTtRQUN6Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFTUoscUNBQVFBLEdBQWZBLFVBQWdCQSxNQUFNQTtRQUNsQkssRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsR0FBQ0EsQ0FBQ0EsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDcENBLE1BQU1BLENBQUNBO1FBQ1hBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7SUFFTUwsbUNBQU1BLEdBQWJBO1FBQ0lNLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQ2xDQSxDQUFDQTtJQS9DTU4sMEJBQU9BLEdBQWtCQTtRQUM1QkEsV0FBV0E7UUFDWEEsYUFBYUE7S0FDaEJBLENBQUNBO0lBNkNOQSx5QkFBQ0E7QUFBREEsQ0F6REEsQUF5RENBLElBQUE7QUF6RFksMEJBQWtCLHFCQXlEOUIsQ0FBQSIsImZpbGUiOiJtb2R1bGVzL2FkbWluL2xkYXAtdXNlci1jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVc2VyU2VydmljZX0gZnJvbSAnLi4vcmVzdC91c2VyJztcblxuZXhwb3J0IGNsYXNzIExkYXBVc2VyQ29udHJvbGxlciB7XG4gICAgcHJpdmF0ZSBlcnJvck1zZztcbiAgICBwcml2YXRlIHVzZXJMaXN0IDogQXJyYXk8YW55PjtcbiAgICBwcml2YXRlIGFsbFVzZXJMaXN0IDogQXJyYXk8YW55PjtcbiAgICBwcml2YXRlIHBhZ2VObyA9IDE7XG4gICAgcHJpdmF0ZSBwYWdlU2l6ZSA9IDEwO1xuICAgIHByaXZhdGUgdG90YWxQYWdlcyA9IDE7XG4gICAgcHJpdmF0ZSBzZWFyY2ggPSBcIlwiO1xuXG4gICAgc3RhdGljICRpbmplY3Q6IEFycmF5PHN0cmluZz4gPSBbXG4gICAgICAgICckbG9jYXRpb24nLFxuICAgICAgICAnVXNlclNlcnZpY2UnLFxuICAgIF07XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSAkbG9jYXRpb246IG5nLklMb2NhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgVXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuZ2V0VXNlcnMoKTtcbiAgICAgICAgdGhpcy5nZXRMZGFwVXNlcnMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGRhcFVzZXJzKCl7XG4gICAgICAgIHRoaXMuVXNlclNlcnZpY2UuZ2V0TGRhcFVzZXJzUGFnZSh0aGlzLnNlYXJjaCx0aGlzLnBhZ2VObyx0aGlzLnBhZ2VTaXplKS50aGVuKChkYXRhOmFueSk9PntcbiAgICAgICAgICAgIHRoaXMudXNlckxpc3QgPSBkYXRhLnVzZXJzO1xuICAgICAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKGRhdGEudG90YWxjb3VudC90aGlzLnBhZ2VTaXplKTtcbiAgICAgICAgICAgIHZhciBkaWZmID0gXy5kaWZmZXJlbmNlKF8ucGx1Y2sodGhpcy51c2VyTGlzdCwgXCJ1c2VybmFtZVwiKSwgXy5wbHVjayh0aGlzLmFsbFVzZXJMaXN0LCBcInVzZXJuYW1lXCIpKTtcbiAgICAgICAgICAgIHRoaXMudXNlckxpc3QgPSBfLmZpbHRlcih0aGlzLnVzZXJMaXN0LCBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBkaWZmLmluZGV4T2Yob2JqLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICBpZihpbmRleCA+PSAwICl7XG4gICAgICAgICAgICAgICAgICAgIG9iai5pbXBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgcHVibGljIGdldFVzZXJzKCl7XG4gICAgICAgIHRoaXMuVXNlclNlcnZpY2UuZ2V0VXNlcnMoKS50aGVuKCh1c2Vycyk9PntcbiAgICAgICAgICAgIHRoaXMuYWxsVXNlckxpc3QgPSB1c2VycztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZExkYXBVc2VyKHVzZXIpe1xuICAgICAgICB0aGlzLlVzZXJTZXJ2aWNlLmFkZFVzZXIodXNlcikudGhlbigodXNlcik9PntcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHBhZ2luYXRlKHBhZ2VObykge1xuICAgICAgICBpZihwYWdlTm88MSB8fCBwYWdlTm8gPiB0aGlzLnRvdGFsUGFnZXMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucGFnZU5vID0gcGFnZU5vO1xuICAgICAgICB0aGlzLmdldExkYXBVc2VycygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW5jZWwoKXtcbiAgICAgICAgdGhpcy4kbG9jYXRpb24ucGF0aCgnL2FkbWluJyk7XG4gICAgfVxufVxuIl19
