var EmailController = (function () {
    function EmailController($location, EmailService) {
        this.$location = $location;
        this.EmailService = EmailService;
        this.encryption = 'ssl';
        this.getMailNotificationSettings();
        this.onloadSave = false;
        this.onloadTest = false;
    }
    EmailController.prototype.save = function () {
        var _this = this;
        this.onloadSave = true;
        var notifier = {
            mailnotification: this.mailNotification,
            smtpserver: this.smtpServer,
            port: parseInt(this.port.toString()),
            encryption: this.encryption,
            mailid: this.mailId,
            password: this.password,
            subprefix: this.subPrefix,
            skipverify: this.skipVerify
        };
        this.EmailService.saveMailSettings(notifier).then(function (result) {
            if (result.status === 200) {
                _this.onloadSave = false;
                _this.notification = {
                    type: "success",
                    header: "Success : ",
                    message: "Configuration Successfully Saved"
                };
            }
        }).catch(function (result) {
            if (result.status !== 200) {
                _this.onloadSave = false;
                _this.notification = {
                    type: "danger",
                    header: "Failed : ",
                    message: result.data
                };
            }
        });
        this.showNotification = true;
    };
    EmailController.prototype.test = function () {
        var _this = this;
        this.onloadTest = true;
        var notifier = {
            mailnotification: this.mailNotification,
            smtpserver: this.smtpServer,
            port: parseInt(this.port.toString()),
            encryption: this.encryption,
            mailid: this.mailId,
            password: this.password,
            subprefix: this.subPrefix,
            skipverify: this.skipVerify,
            recipient: this.recipient
        };
        this.EmailService.testMailSettings(notifier).then(function (result) {
            if (result.status === 200) {
                _this.onloadTest = false;
                _this.notification = {
                    type: "success",
                    header: "Success : ",
                    message: "Test mail is sent successfully"
                };
            }
        }).catch(function (result) {
            if (result.status !== 200) {
                _this.onloadTest = false;
                _this.notification = {
                    type: "danger",
                    header: "Failed : ",
                    message: result.data
                };
            }
        });
        this.showNotification = true;
    };
    EmailController.prototype.getMailNotificationSettings = function () {
        var _this = this;
        this.EmailService.getMailNotifier().then(function (notifier) {
            _this.mailId = notifier.mailid;
            _this.port = notifier.port;
            _this.skipVerify = notifier.skipverify;
            _this.smtpServer = notifier.smtpserver;
            _this.encryption = notifier.encryption;
            _this.mailNotification = notifier.mailnotification;
            _this.subPrefix = notifier.subprefix;
        });
    };
    EmailController.$inject = [
        '$location',
        'EmailService',
    ];
    return EmailController;
})();
exports.EmailController = EmailController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
