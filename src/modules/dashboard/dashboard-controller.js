var libs_1 = require('../base/libs');
var DashboardController = (function () {
    function DashboardController(scopeService, $location, $log, intervalSvc, serverService, clusterService) {
        var _this = this;
        this.scopeService = scopeService;
        this.$location = $location;
        this.$log = $log;
        this.intervalSvc = intervalSvc;
        this.serverService = serverService;
        this.clusterService = clusterService;
        this.isLoading = { summaryData: true, utilizationData: true, trendsChartsData: true };
        this.utilization = { data: {}, config: {} };
        this.systemUtilization = { cpu: { data: {}, config: {} }, memory: { data: {}, config: {} } };
        this.utilizationByProfile = {};
        this.mostUsedPools = [];
        this.capacity = {};
        this.clusters = { criticalAlerts: 0, error: 0, nearfull: 0, total: 0 };
        this.hosts = { criticalAlerts: 0, error: 0, total: 0, unaccepted: 0 };
        this.pgs = { total: 0, error: 0, warning: 0 };
        this.osds = { criticalAlerts: 0, error: 0, nearfull: 0, total: 0 };
        this.objects = { criticalAlerts: 0, total: 0 };
        this.pools = { criticalAlerts: 0, down: 0, total: 0 };
        this.monitors = { criticalAlerts: 0, down: 0, total: 0 };
        this.trendsCharts = {
            overall: { title: "", data: { xData: [], yData: [] }, config: {} },
            cpu: { title: "", data: { xData: [], yData: [] }, config: {} },
            memory: { title: "", data: { xData: [], yData: [] }, config: {} },
            iops: { title: "", data: { xData: [], yData: [] }, config: {} },
            throughput: { title: "", data: { xData: [], yData: [] }, config: {} },
            latency: { title: "", data: { xData: [], yData: [] }, config: {} }
        };
        this.timeSlots = [{ name: "Last 1 hour", value: "-1h" },
            { name: "Last 2 hours", value: "-2h" },
            { name: "Last 24 hours", value: "" }];
        this.selectedTimeSlot = this.timeSlots[0];
        // Summary data is returned as empty if there are no clusters in the system.
        // So here we are fetching the cluster list and redirect
        // if no clusters are present
        this.clusterService.getList().then(function (clusters) {
            if (clusters.length === 0) {
                _this.$location.path('/clusters');
            }
            else {
                _this.timer = _this.intervalSvc(function () { return _this.loadDashboardData(); }, 120 * 1000);
                _this.scopeService.$on('$destroy', function () {
                    _this.intervalSvc.cancel(_this.timer);
                });
                _this.loadDashboardData();
            }
        });
    }
    /**
     *This is the callback function called after getting summary data.
    */
    DashboardController.prototype.loadDashboardData = function () {
        var _this = this;
        this.serverService.getDashboardSummary().then(function (summary) {
            _this.summary = summary;
            _this.formatUtilizationData(summary.usage);
            _this.formatUtilizationByProfileData(summary.storageprofileusage, summary.monitoringplugins);
            _this.getMostUsedPools(summary.storageusage);
            _this.osds = summary.slucount;
            _this.hosts = summary.nodescount;
            _this.clusters = summary.clusterscount;
            _this.pools = summary.storagecount;
            if (summary.providermonitoringdetails.ceph) {
                _this.monitors = summary.providermonitoringdetails.ceph.monitor;
                _this.objects.total = summary.providermonitoringdetails.ceph.objects.num_objects;
                _this.objects.criticalAlerts = summary.providermonitoringdetails.ceph.objects.num_objects_degraded;
                _this.pgs = summary.providermonitoringdetails.ceph.pgnum;
            }
            _this.changeTimeSlot(_this.selectedTimeSlot);
            _this.isLoading.summaryData = false;
        });
        this.getOverallUtilization();
    };
    /**
     *This is for overall utilization trend chart.
    */
    DashboardController.prototype.getOverallUtilization = function () {
        var _this = this;
        this.serverService.getSystemOverallUtilization().then(function (overall_utilization) {
            _this.setGraphData(overall_utilization, "overall", "", "%", "large");
        });
    };
    /**
     *This is the helper function for format the overall utilization data.
    */
    DashboardController.prototype.formatUtilizationData = function (usage) {
        this.capacity = usage;
        this.utilization.data = usage;
        this.utilization.config.chartId = "utilizationChart";
        this.utilization.config.thresholds = { 'warning': '60', 'error': '90' };
        this.utilization.config.centerLabelFn = function () {
            return ((usage.used * 100) / usage.total).toFixed(1) + "% Used";
        };
        this.utilization.config.tooltipFn = function (d) {
            return '<span class="donut-tooltip-pf"style="white-space: nowrap;">' +
                libs_1.numeral(d[0].value).format('0 b') + ' ' + d[0].name +
                '</span>';
        };
        this.isLoading.utilizationData = false;
    };
    /**
     *This is the helper function for format the utilization by profile data.
    */
    DashboardController.prototype.formatUtilizationByProfileData = function (profiles, monitoringplugins) {
        var _this = this;
        this.utilizationByProfile.threshold = {};
        monitoringplugins.storage_profile_utilization.configs.forEach(function (config) {
            _this.utilizationByProfile.threshold[config.type] = config.value;
        });
        this.utilizationByProfile.profiles = [];
        var othersProfile = { "used": 0, "total": 0 };
        Object.keys(profiles).forEach(function (profile) {
            var usedData = profiles[profile]["utilization"];
            if (profile === 'default' || profile === 'sas' || profile === 'ssd') {
                _this.utilizationByProfile.profiles.push({ "usage": usedData, "subtitle": profile });
            }
            else {
                othersProfile.used = othersProfile.used + profiles[profile]["utilization"]["used"];
                othersProfile.total = othersProfile.total + profiles[profile]["utilization"]["total"];
            }
        });
        if (othersProfile.total > 0) {
            this.utilizationByProfile.profiles.push({ "usage": { "total": othersProfile.total, "used": othersProfile.used }, "subtitle": "Others" });
        }
    };
    DashboardController.prototype.getMostUsedPools = function (storageUsage) {
        var _this = this;
        this.mostUsedPools = [];
        _.each(storageUsage, function (pool) {
            _this.mostUsedPools.push({ "title": pool["name"], "data": { total: 100, used: pool["usage"]["percentused"] } });
        });
    };
    DashboardController.prototype.getCpuUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.summary.utilizations.cpupercentageusage !== undefined) {
            usage = { "total": 100, "used": this.summary.utilizations.cpupercentageusage };
        }
        this.setGraphUtilization(usage, "cpu");
        this.serverService.getSystemCpuUtilization(timeSlot.value).then(function (cpu_utilization) {
            _this.setGraphData(cpu_utilization, "cpu", "", "%", "large");
        });
    };
    DashboardController.prototype.getMemoryUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.summary.utilizations.memoryusage !== undefined) {
            usage = { "total": this.summary.utilizations.memoryusage.total, "used": this.summary.utilizations.memoryusage.used };
        }
        this.setGraphUtilization(usage, "memory");
        this.serverService.getSystemMemoryUtilization(timeSlot.value).then(function (memory_utilization) {
            _this.setGraphData(memory_utilization, "memory", "", "%", "large");
        });
    };
    DashboardController.prototype.getIOPS = function (timeSlot) {
        var _this = this;
        this.serverService.getIOPS(timeSlot.value).then(function (iops) {
            _this.setGraphData(iops, "iops", "IOPS", "", "compact");
        });
    };
    DashboardController.prototype.getThroughput = function (timeSlot) {
        var _this = this;
        this.serverService.getThroughput(timeSlot.value).then(function (throughput) {
            _this.setGraphData(throughput, "throughput", "Throughput", "B/s", "compact");
        });
    };
    DashboardController.prototype.getNetworkLatency = function (timeSlot) {
        var _this = this;
        this.serverService.getNetworkLatency(timeSlot.value).then(function (network_latency) {
            _this.setGraphData(network_latency, "latency", "Latency", "ms", "compact");
        });
    };
    DashboardController.prototype.setGraphUtilization = function (usage, graphName) {
        this.systemUtilization[graphName].data = usage;
        this.systemUtilization[graphName].config.chartId = graphName;
        this.systemUtilization[graphName].config.thresholds = { 'warning': '60', 'error': '90' };
        this.systemUtilization[graphName].config.tooltipFn = function (d) {
            return '<span class="donut-tooltip-pf"style="white-space: nowrap;">' +
                ((d[0].value * 100) / usage.total).toFixed(1) + '% ' + d[0].name +
                '</span>';
        };
        this.systemUtilization[graphName].config.centerLabelFn = function () {
            return ((usage.used * 100) / usage.total).toFixed(1) + "% Used";
        };
    };
    DashboardController.prototype.setGraphData = function (graphArray, graphName, graphTitle, graphUnits, graphLayout) {
        var times = [];
        var used = [];
        times.push("dates");
        used.push("used");
        var isDataAvailable = false;
        if (graphArray.length !== 0) {
            var usageDataArray = graphArray[0].datapoints;
            isDataAvailable = (usageDataArray.length > 0 ? true : false);
            for (var index in usageDataArray) {
                var subArray = usageDataArray[index];
                times.push(new Date(subArray[1]));
                used.push(subArray[0].toFixed(1));
            }
        }
        this.trendsCharts[graphName] = {
            title: graphTitle,
            data: {
                dataAvailable: isDataAvailable,
                total: 100,
                xData: times,
                yData: used
            },
            config: {
                chartId: graphName,
                title: graphTitle,
                layout: graphLayout,
                valueType: 'actual',
                units: graphUnits,
                tooltipFn: function (d) {
                    return '<span class="donut-tooltip-pf">' +
                        d[0].value + ' ' + graphUnits +
                        '</span>';
                }
            }
        };
        this.isLoading.trendsChartsData = false;
    };
    DashboardController.prototype.changeTimeSlot = function (time) {
        this.selectedTimeSlot = time;
        this.getCpuUtilization(this.selectedTimeSlot);
        this.getMemoryUtilization(this.selectedTimeSlot);
        this.getIOPS(this.selectedTimeSlot);
        this.getThroughput(this.selectedTimeSlot);
        this.getNetworkLatency(this.selectedTimeSlot);
    };
    DashboardController.$inject = [
        '$scope',
        '$location',
        '$log',
        '$interval',
        'ServerService',
        'ClusterService'
    ];
    return DashboardController;
})();
exports.DashboardController = DashboardController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
