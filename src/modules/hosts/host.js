var cluster_helpers_1 = require('../clusters/cluster-helpers');
var ModalHelpers = require('../modal/modal-helpers');
var HostListController = (function () {
    function HostListController($scope, $interval, $location, $log, $modal, $timeout, clusterSvc, serverService, utilService, requestService) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.$log = $log;
        this.$modal = $modal;
        this.$timeout = $timeout;
        this.clusterSvc = clusterSvc;
        this.serverService = serverService;
        this.utilService = utilService;
        this.requestService = requestService;
        this.updateHost = function (hosts) {
            var self = _this;
            _.each(hosts, function (host) {
                host.alerts = 0;
                if (self.hostStats[host.nodeid]) {
                    host.cpu_average = Math.round(Math.random() * 70);
                    host.memory_average = self.hostStats[host.nodeid].memAvg;
                }
                else {
                    host.cpu_average = Math.round(Math.random() * 70);
                    host.memory_average = Math.round(Math.random() * 70);
                }
                if (host.clusterid != null && host.clusterid !== '00000000-0000-0000-0000-000000000000') {
                    if (!self.clusters[host.clusterid]) {
                        self.clusterSvc.get(host.clusterid).then(function (cluster) {
                            host.cluster_type = cluster.type;
                            host.cluster_name = cluster.name;
                            self.clusters[host.clusterid] = { name: cluster.name, type: cluster.type };
                        });
                    }
                    else {
                        host.cluster_type = self.clusters[host.clusterid].type;
                        host.cluster_name = self.clusters[host.clusterid].name;
                    }
                }
                else {
                    host.cluster_type = "Free";
                    host.cluster_name = "Unassigned";
                }
                self.serverService.getHostMemoryUtilization(host.nodeid, '').then(function (memory_utilization) {
                    self.hostStats[host.nodeid] = { memAvg: host.utilizations.memoryusage.percentused };
                });
            });
            _this.list = hosts;
        };
        this.paramsObject = $location.search();
        if (Object.keys(this.paramsObject).length > 0) {
            if ("tab" in this.paramsObject) {
                delete this.paramsObject.tab;
            }
            this.updateSearchQuery(this.paramsObject);
        }
        this.clusterHelper = new cluster_helpers_1.ClusterHelper(utilService, requestService, $log, $timeout);
        this.clusters = {};
        this.hostStats = {};
        this.timer = this.$interval(function () { return _this.reloadData(); }, 60000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.reloadData();
    }
    HostListController.prototype.isArray = function (data) {
        return data instanceof Array;
    };
    HostListController.prototype.updateSearchQuery = function (paramsObject) {
        var _this = this;
        this.searchQuery = '';
        /*  paramsObject can have 3 case : -
                1) { status: [error,warning] , tab: <OSD,HOST,etc> }
                2) { tab: <OSD,HOST,etc> }
                3) { status: [error,warning] }
            and searchQuery will be like this : -
            /api/<ver>/clusters?status=ok&status=warning&tab=<HOST/OSD/etc>
        */
        Object.keys(paramsObject).forEach(function (value) {
            var joinedStr = "";
            if (paramsObject[value] instanceof Array) {
                var queryArray = paramsObject[value].map(function (status) {
                    return value + '=' + status;
                });
                joinedStr = queryArray.join('&');
            }
            else {
                joinedStr = value + "=" + paramsObject[value];
            }
            if (_this.searchQuery !== '') {
                _this.searchQuery += "&";
            }
            _this.searchQuery += joinedStr;
        });
    };
    HostListController.prototype.clearSearchQuery = function (key, itemIndex) {
        if (itemIndex === null) {
            delete this.paramsObject[key];
        }
        else {
            this.paramsObject[key].splice(itemIndex, 1);
        }
        this.updateSearchQuery(this.paramsObject);
        this.reloadData();
    };
    HostListController.prototype.reloadData = function () {
        if (this.clusterId === undefined) {
            if (this.searchQuery === '') {
                this.serverService.getList().then(this.updateHost);
            }
            else {
                this.serverService.getFilteredList(this.searchQuery).then(this.updateHost);
            }
        }
        else {
            if (this.searchQuery === '') {
                this.serverService.getListByCluster(this.clusterId).then(this.updateHost);
            }
            else {
                this.serverService.getFilteredListByCluster(this.clusterId, this.searchQuery).then(this.updateHost);
            }
        }
    };
    HostListController.prototype.getClusterTypeTitle = function (type) {
        return this.clusterHelper.getClusterType(type).type;
    };
    HostListController.prototype.getNodeTypeTitle = function (node) {
        if (node.roles.length === 0)
            return 'Unassigned';
        else if (node.roles[0] === "OSD")
            return 'OSD Host';
        else if (node.roles[0] === "MON")
            return 'Monitor';
    };
    HostListController.prototype.getHostDonutColor = function (donut_value) {
        if (donut_value >= 90)
            return '#CC0000';
        if (donut_value >= 80)
            return '#EC7A08';
        else
            return '#3F9C35';
    };
    HostListController.prototype.removeHost = function (host) {
        var _this = this;
        var modal = ModalHelpers.RemoveConfirmation(this.$modal, {});
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
            if (confirmed) {
                _this.serverService.delete(host.hostname);
            }
            $hide();
        });
    };
    HostListController.prototype.reinitialize = function (host) {
        this.serverService.reinitialize(host.hostname);
    };
    HostListController.prototype.createNewCluster = function () {
        this.$location.path('/clusters/new');
    };
    HostListController.$inject = [
        '$scope',
        '$interval',
        '$location',
        '$log',
        '$modal',
        '$timeout',
        'ClusterService',
        'ServerService',
        'UtilService',
        'RequestService'
    ];
    return HostListController;
})();
exports.HostListController = HostListController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
