// <reference path="../typings/tsd.d.ts" />
var HostOverviewController = (function () {
    function HostOverviewController(serverService) {
        var _this = this;
        this.serverService = serverService;
        this.isLoading = { summaryData: true, donutChartsData: true, trendsChartsData: true };
        this.isOsd = false;
        this.summary = {};
        this.initialTime = { name: "Last 1 hour", value: "-1h" };
        this.donutCharts = {
            cpu: { data: {}, config: {} },
            memory: { data: {}, config: {} },
            swap: { data: {}, config: {} },
            storage: { data: {}, config: {} },
            network: { data: {}, config: {} }
        };
        this.trendCharts = {
            cpu: { title: "", data: { xData: [], yData: [] }, config: {} },
            memory: { title: "", data: { xData: [], yData: [] }, config: {} },
            swap: { title: "", data: { xData: [], yData: [] }, config: {} },
            storage: { title: "", data: { xData: [], yData: [] }, config: {} },
            network: { title: "", data: { xData: [], yData: [] }, config: {} },
            iop: { title: "", data: { xData: [], yData: [] }, config: {} },
            throughput: { title: "", data: { xData: [], yData: [] }, config: {} },
            latency: { title: "", data: { xData: [], yData: [] }, config: {} }
        };
        this.serverService.get(this.id).then(function (host) {
            _this.host = host;
            if (_this.host.roles.indexOf('OSD') > -1) {
                _this.isOsd = true;
            }
            _this.getHostSummary(host.nodeid);
            _this.changeTimeSlotForUtilization(_this.initialTime);
            _this.changeTimeSlotForPerformance(_this.initialTime);
            _this.changeTimeSlotForNetwork(_this.initialTime);
        });
    }
    HostOverviewController.prototype.getHostSummary = function (nodeid) {
        var _this = this;
        this.serverService.getHostSummary(nodeid).then(function (summary) {
            _this.summary = summary;
            _this.isLoading.summaryData = false;
        });
    };
    HostOverviewController.prototype.getCpuUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.host.utilizations.cpuusage !== undefined) {
            usage = { "total": 100, "used": this.host.utilizations.cpuusage.percentused };
        }
        this.setGraphUtilization(usage, "cpu");
        this.serverService.getHostCpuUtilization(this.host.nodeid, timeSlot.value).then(function (cpu_utilization) {
            _this.setGraphData(cpu_utilization, "cpu", "", "%", "large");
        });
    };
    HostOverviewController.prototype.getMemoryUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.host.utilizations.memoryusage !== undefined) {
            usage = { "total": this.host.utilizations.memoryusage.total, "used": this.host.utilizations.memoryusage.used };
        }
        this.setGraphUtilization(usage, "memory");
        this.serverService.getHostMemoryUtilization(this.host.nodeid, timeSlot.value).then(function (memory_utilization) {
            _this.setGraphData(memory_utilization, "memory", "", "%", "large");
        });
    };
    HostOverviewController.prototype.getSwapUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.host.utilizations.swapusage !== undefined) {
            usage = { "total": this.host.utilizations.swapusage.total, "used": this.host.utilizations.swapusage.used };
        }
        this.setGraphUtilization(usage, "swap");
        this.serverService.getHostSwapUtilization(this.host.nodeid, timeSlot.value).then(function (swap_utilization) {
            _this.setGraphData(swap_utilization, "swap", "", "%", "large");
        });
    };
    HostOverviewController.prototype.getStorageUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.host.utilizations.storageusage !== undefined) {
            usage = { "total": this.host.utilizations.storageusage.total, "used": this.host.utilizations.storageusage.used };
        }
        this.setGraphUtilization(usage, "storage");
        this.serverService.getHostStorageUtilization(this.host.nodeid, timeSlot.value).then(function (storage_utilization) {
            _this.setGraphData(storage_utilization, "storage", "", "%", "large");
        });
    };
    HostOverviewController.prototype.getNetworkUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.host.utilizations.networkusage !== undefined) {
            usage = { "total": this.host.utilizations.networkusage.total, "used": this.host.utilizations.networkusage.used };
        }
        this.setGraphUtilization(usage, "network");
        this.serverService.getHostNetworkUtilization(this.host.nodeid, timeSlot.value).then(function (network_utilization) {
            _this.setGraphData(network_utilization, "network", "", "%", "large");
        });
    };
    HostOverviewController.prototype.getDiskIOPS = function (timeSlot) {
        var _this = this;
        this.serverService.getHostIOPS(this.host.nodeid, timeSlot.value).then(function (iops) {
            _this.setGraphData(iops, "iops", "IOPS", "", "compact");
        });
    };
    HostOverviewController.prototype.getThroughput = function (timeSlot) {
        var _this = this;
        this.serverService.getHostThroughput(this.host.nodeid, timeSlot.value).then(function (throughput) {
            _this.setGraphData(throughput, "throughput", "Network Throughput", "B/s", "compact");
        });
    };
    HostOverviewController.prototype.getNetworkLatency = function (timeSlot) {
        var _this = this;
        this.serverService.getHostNetworkLatency(this.host.nodeid, timeSlot.value).then(function (network_latency) {
            _this.setGraphData(network_latency, "latency", "Network Latency", "ms", "compact");
        });
    };
    HostOverviewController.prototype.setGraphUtilization = function (usage, graphName) {
        this.donutCharts[graphName].data = usage;
        this.donutCharts[graphName].config.chartId = graphName;
        this.donutCharts[graphName].config.thresholds = { 'warning': '60', 'error': '90' };
        this.donutCharts[graphName].config.tooltipFn = function (d) {
            return '<span class="donut-tooltip-pf"style="white-space: nowrap;">' +
                ((d[0].value * 100) / usage.total).toFixed(1) + '% ' + d[0].name +
                '</span>';
        };
        this.donutCharts[graphName].config.centerLabelFn = function () {
            return ((usage.used * 100) / usage.total).toFixed(1) + "%";
        };
        this.isLoading.donutChartsData = false;
    };
    HostOverviewController.prototype.setGraphData = function (graphArray, graphName, graphTitle, graphUnits, graphLayout) {
        var times = [];
        var used = [];
        times.push("dates");
        used.push("used");
        var isDataAvailable = false;
        if (graphArray.length !== 0) {
            var usageDataArray = graphArray[0].datapoints;
            isDataAvailable = (usageDataArray.length > 0 ? true : false);
            for (var index in usageDataArray) {
                var subArray = usageDataArray[index];
                times.push(new Date(subArray[1]));
                used.push(subArray[0].toFixed(1));
            }
        }
        this.trendCharts[graphName] = {
            title: graphTitle,
            data: {
                dataAvailable: isDataAvailable,
                total: 100,
                xData: times,
                yData: used
            },
            config: {
                chartId: graphName,
                title: graphTitle,
                layout: graphLayout,
                valueType: 'actual',
                units: graphUnits,
                tooltipFn: function (d) {
                    return '<span class="donut-tooltip-pf">' +
                        d[0].value + ' ' + graphUnits +
                        '</span>';
                }
            }
        };
        this.isLoading.trendsChartsData = false;
    };
    HostOverviewController.prototype.changeTimeSlotForUtilization = function (time) {
        this.getCpuUtilization(time);
        this.getMemoryUtilization(time);
        this.getSwapUtilization(time);
        this.getStorageUtilization(time);
    };
    HostOverviewController.prototype.changeTimeSlotForNetwork = function (time) {
        this.getNetworkUtilization(time);
    };
    HostOverviewController.prototype.changeTimeSlotForPerformance = function (time) {
        this.getDiskIOPS(time);
        this.getThroughput(time);
        this.getNetworkLatency(time);
    };
    //Services that are used in this class.
    HostOverviewController.$inject = [
        'ServerService'
    ];
    return HostOverviewController;
})();
exports.HostOverviewController = HostOverviewController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
