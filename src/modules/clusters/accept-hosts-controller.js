// <reference path="../typings/tsd.d.ts" />
var AcceptHostsController = (function () {
    function AcceptHostsController($location, $scope, $interval, $log, $timeout, $modal, serverSvc, requestSvc, utilSvc, requestTrackingSvc) {
        var _this = this;
        this.$location = $location;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$log = $log;
        this.$timeout = $timeout;
        this.$modal = $modal;
        this.serverSvc = serverSvc;
        this.requestSvc = requestSvc;
        this.utilSvc = utilSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        var queryParams = this.$location.search();
        this.expandcluster = queryParams['expandcluster'];
        this.from = queryParams['from'];
        this.discoveredHosts = [];
        this.hostsBeingAccepted = [];
        this.timer = this.$interval(function () { return _this.refreshHostsStatus(); }, 5000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.serverSvc.getDiscoveredHosts().then(function (discoverdHosts) {
            _.each(discoverdHosts, function (discoverdHost) {
                var host = {
                    hostname: discoverdHost.hostname,
                    fingerPrint: discoverdHost.saltfingerprint,
                    state: "UNACCEPTED",
                };
                _this.discoveredHosts.push(host);
            });
        });
    }
    AcceptHostsController.prototype.refreshHostsStatus = function () {
        var _this = this;
        _.each(this.hostsBeingAccepted, function (host) {
            if (host.state === "ACCEPTING") {
                _this.requestSvc.get(host.taskid).then(function (task) {
                    if (task.completed && task.status === 1) {
                        //Getting the initializing task for the particular host. Even if there are many failed initializing tasks for a given host, first one should be
                        //either in progress task and last updated task.
                        _this.requestSvc.getList(undefined, undefined, undefined, undefined, undefined, 'Initialize Node: ' + host.hostname).then(function (data) {
                            if (data.totalcount > 0) {
                                host.taskid = data.tasks[0].id;
                                _this.$log.info('Accepted host ' + host.hostname + ' in Accept Hosts Controller ');
                                host.state = "INITIALIZING";
                            }
                        });
                    }
                    else if (task.completed && (task.status === 2 || task.status === 3)) {
                        _this.$log.info('Failed to accept host ' + host.hostname + ' in Accept Hosts Controller ');
                        host.state = "FAILED";
                    }
                });
            }
            else if (host.state === "INITIALIZING") {
                _this.requestSvc.get(host.taskid).then(function (task) {
                    if (task.completed && task.status === 1) {
                        _this.$log.info('Initialized host ' + host.hostname + ' in Accept Hosts Controller ');
                        host.state = "INITIALIZED";
                        host.lastupdated = task.statuslist[task.statuslist.length - 1].Timestamp;
                    }
                    else if (task.completed && (task.status === 2 || task.status === 3)) {
                        _this.$log.info('Failed to initialize host ' + host.hostname + ' in Accept Hosts Controller');
                        host.state = "FAILED";
                        host.lastupdated = task.statuslist[task.statuslist.length - 1].Timestamp;
                    }
                });
            }
        });
    };
    AcceptHostsController.prototype.acceptAllHosts = function () {
        var _this = this;
        _.each(this.discoveredHosts, function (host) {
            if (host.state === 'UNACCEPTED') {
                _this.acceptHost(host);
            }
        });
    };
    AcceptHostsController.prototype.acceptHost = function (host) {
        var _this = this;
        var saltfingerprint = {
            saltfingerprint: host.fingerPrint
        };
        this.utilSvc.acceptHost(host.hostname, saltfingerprint).then(function (result) {
            _this.$log.info(result);
            _this.hostsBeingAccepted.push(host);
            host.state = "ACCEPTING";
            host.taskid = result.data.taskid;
        });
    };
    AcceptHostsController.prototype.showAcceptTaskDetails = function (host) {
        this.showTaskDetailsModal(host.taskid);
    };
    AcceptHostsController.prototype.showTaskDetailsModal = function (taskId) {
        return this.$modal({
            template: 'views/modal/task-details-popup.html',
            backdrop: 'static',
            keyboard: false,
            controller: function () {
                this.taskId = taskId;
            },
            controllerAs: 'tasks'
        });
    };
    AcceptHostsController.prototype.reinitialize = function (host) {
        this.serverSvc.reinitialize(host.hostname).then(function (result) {
            if (result.status === 200) {
                host.taskid = result.data.taskid;
                host.state = "INITIALIZING";
            }
        });
    };
    AcceptHostsController.prototype.hostsFailedToInitialize = function () {
        return _.filter(this.discoveredHosts, function (host) { return host.state === 'FAILED'; }).length;
    };
    AcceptHostsController.prototype.hostsInitialized = function () {
        return _.filter(this.discoveredHosts, function (host) { return host.state === 'INITIALIZED'; }).length;
    };
    AcceptHostsController.prototype.hostsInProgress = function () {
        return _.filter(this.discoveredHosts, function (host) { return (host.state === 'ACCEPTING' || host.state === 'INITIALIZING'); }).length;
    };
    AcceptHostsController.prototype.continue = function () {
        this.$location.search({});
        if (this.expandcluster !== undefined) {
            this.$location.path('/clusters/expand/' + this.expandcluster).search('hostsaccepted', 'true');
        }
        else {
            this.$location.path('/clusters/new').search('hostsaccepted', 'true');
        }
    };
    AcceptHostsController.prototype.cancel = function () {
        this.$location.search({});
        if (this.from !== undefined) {
            this.$location.path(this.from);
        }
        else {
            this.$location.path('/clusters');
        }
    };
    AcceptHostsController.$inject = ['$location', '$scope', '$interval', '$log', '$timeout', '$modal', 'ServerService', 'RequestService', 'UtilService', 'RequestTrackingService'];
    return AcceptHostsController;
})();
exports.AcceptHostsController = AcceptHostsController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
