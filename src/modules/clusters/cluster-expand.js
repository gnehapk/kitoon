// <reference path="../typings/tsd.d.ts" />
var cluster_helpers_1 = require('./cluster-helpers');
var ModalHelpers = require('../modal/modal-helpers');
var ClusterExpandController = (function () {
    function ClusterExpandController(qService, logService, scopeService, modalService, timeoutService, locationService, routeParamsSvc, osdService, utilService, serverService, clusterService, requestService, requestTrackingService, configSvc) {
        var _this = this;
        this.qService = qService;
        this.logService = logService;
        this.scopeService = scopeService;
        this.modalService = modalService;
        this.timeoutService = timeoutService;
        this.locationService = locationService;
        this.routeParamsSvc = routeParamsSvc;
        this.osdService = osdService;
        this.utilService = utilService;
        this.serverService = serverService;
        this.clusterService = clusterService;
        this.requestService = requestService;
        this.requestTrackingService = requestTrackingService;
        this.configSvc = configSvc;
        this.cephMixHostRoles = false;
        this.newHost = {};
        this.selectedHosts = 0;
        this.hosts = [];
        this.disks = [];
        this.clusterHelper = new cluster_helpers_1.ClusterHelper(utilService, requestService, logService, timeoutService);
        this.clusterID = this.routeParamsSvc['id'];
        this.hostTypes = ["Monitor", "OSD Host", "OSD + Monitor"];
        this.configSvc.getConfig().then(function (config) {
            if (config.ceph_mix_host_roles) {
                _this.cephMixHostRoles = config.ceph_mix_host_roles;
            }
        });
        this.clusterService.get(this.clusterID).then(function (cluster) { return _this.loadCluster(cluster); });
        var queryParams = locationService.search();
        if (Object.keys(queryParams).length > 0 && queryParams['hostsaccepted'] === "true") {
            this.fetchFreeHosts();
        }
        else {
            this.serverService.getDiscoveredHosts().then(function (freeHosts) {
                if (freeHosts.length > 0) {
                    var modal = ModalHelpers.UnAcceptedHostsFound(_this.modalService, {}, freeHosts.length);
                    modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
                        if (confirmed) {
                            _this.locationService.path('/clusters/new/accept-hosts').search('expandcluster', _this.clusterID);
                        }
                        $hide();
                        _this.fetchFreeHosts();
                    });
                }
                else {
                    _this.fetchFreeHosts();
                }
            });
        }
    }
    ClusterExpandController.prototype.loadCluster = function (cluster) {
        this.cluster = cluster;
        this.name = cluster.name;
        this.clusterType = this.clusterHelper.getClusterType(cluster.cluster_type);
    };
    ClusterExpandController.prototype.updateFingerPrint = function (host) {
        var _this = this;
        this.newHost.cautionMessage = "";
        this.newHost.errorMessage = "";
        this.utilService.getSshFingerprint(host.hostname).then(function (sshfingerprint) {
            host.sshfingerprint = sshfingerprint;
        }, function () {
            _this.newHost.cautionMessage = "Error!.";
            _this.newHost.errorMessage = "Could not fetch ssh fingerprint";
        });
    };
    ClusterExpandController.prototype.updateIPAddress = function (host) {
        this.utilService.getIpAddresses(host.hostname).then(function (result) {
            host.ipaddress = result.length > 0 ? result[0] : "N/A";
        });
    };
    ClusterExpandController.prototype.fetchFreeHosts = function () {
        var _this = this;
        this.serverService.getFreeHosts().then(function (freeHosts) { return _this.loadFreeHosts(freeHosts); });
    };
    ClusterExpandController.prototype.loadFreeHosts = function (freeHosts) {
        var _this = this;
        this.hosts = [];
        _.each(freeHosts, function (freeHost) {
            var host = {
                id: freeHost.nodeid,
                hostname: freeHost.hostname,
                ipaddress: freeHost.management_ip4,
                state: "ACCEPTED",
                disks: freeHost.storage_disks,
                selected: false,
            };
            host.disks = _.filter(freeHost.storage_disks, function (disk) {
                return disk.Type === 'disk' && disk.Used === false;
            });
            _this.hosts.push(host);
            _this.updateFingerPrint(host);
        });
    };
    ClusterExpandController.prototype.selectAllHosts = function () {
        var _this = this;
        this.selectedHosts = 0;
        _.each(this.hosts, function (host) {
            _this.selectHost(host, true);
        });
    };
    ClusterExpandController.prototype.selectHost = function (host, selection) {
        host.selected = selection;
        if (selection && host.hostType === undefined) {
            if (host.disks.length === 0) {
                host.hostType = this.hostTypes[0]; //No Disk available so make this a Mon
            }
            else {
                host.hostType = this.hostTypes[1]; //There are some disks so it can be an OSD
            }
        }
        host.selected ? this.selectedHosts++ : this.selectedHosts--;
        this.countDisks();
        this.validateHost(host);
    };
    ClusterExpandController.prototype.isMon = function (hostType) {
        return hostType === this.hostTypes[0] || hostType === this.hostTypes[2];
    };
    ClusterExpandController.prototype.isOsd = function (hostType) {
        return hostType === this.hostTypes[1] || hostType === this.hostTypes[2];
    };
    ClusterExpandController.prototype.getDisks = function () {
        return this.disks;
    };
    ClusterExpandController.prototype.getHostsDisksSize = function (host) {
        var size = 0;
        size = _.reduce(host.disks, function (size, disk) {
            return size + disk.Size;
        }, 0);
        return size;
    };
    ClusterExpandController.prototype.getDisksSize = function () {
        var size = 0;
        size = _.reduce(this.disks, function (size, disk) {
            return size + disk.Size;
        }, 0);
        return size;
    };
    ClusterExpandController.prototype.countDisks = function () {
        var _this = this;
        var disks = [];
        _.each(this.hosts, function (host) {
            if (host.selected && _this.isOsd(host.hostType)) {
                Array.prototype.push.apply(disks, host.disks);
            }
        });
        this.disks = disks;
    };
    ClusterExpandController.prototype.hostTypeChanged = function (host) {
        this.validateHost(host);
        this.countDisks();
    };
    ClusterExpandController.prototype.validateHost = function (host) {
        if (host.selected) {
            if (host.hostType === undefined) {
                this.errorMessage = "Host '" + host.hostname + "' does not have any role attached.";
                return false;
            }
            else if (this.isOsd(host.hostType) && host.disks.length === 0) {
                this.errorMessage = "Host '" + host.hostname + "' does not have any disk attached and it can't be added as an OSD Host.";
                return false;
            }
        }
        this.errorMessage = "";
        return true;
    };
    ClusterExpandController.prototype.validateHosts = function () {
        var _this = this;
        this.newHost.errorMessage = "";
        var configValid = true;
        var selectedHosts = _.filter(this.hosts, function (host) { return host.selected; });
        if (selectedHosts.length === 0) {
            this.errorMessage = " Select at least one host to expand the Cluster";
            configValid = false;
        }
        else {
            configValid = _.every(selectedHosts, function (host) { return _this.validateHost(host); });
        }
        return configValid;
    };
    ClusterExpandController.prototype.addNewHost = function () {
        this.clusterHelper.addNewHost(this, this.serverService, this.timeoutService, this.requestService);
    };
    ClusterExpandController.prototype.postAddNewHost = function (host) {
        this.clusterHelper.acceptNewHost(this, host);
    };
    ClusterExpandController.prototype.isSubmitAvailable = function () {
        return true;
    };
    ClusterExpandController.prototype.cancel = function () {
        this.locationService.path('/clusters');
    };
    ClusterExpandController.prototype.submit = function () {
        var _this = this;
        if (this.validateHosts()) {
            var nodes = [];
            _.each(this.hosts, function (host) {
                if (host.selected) {
                    var localHost = {
                        nodeid: host.id,
                        nodetype: []
                    };
                    var disks = [];
                    if (_this.isOsd(host.hostType)) {
                        localHost.disks = _.map(host.disks, function (disk) {
                            return { name: disk.DevName, fstype: 'xfs' };
                        });
                        localHost.nodetype.push('OSD');
                    }
                    if (_this.isMon(host.hostType)) {
                        localHost.nodetype.push('MON');
                    }
                    nodes.push(localHost);
                }
            });
            this.expandCluster(this.clusterID, nodes);
        }
    };
    ClusterExpandController.prototype.expandCluster = function (clusterId, cluster) {
        var _this = this;
        this.clusterService.expand(clusterId, cluster).then(function (result) {
            if (result.status === 202) {
                _this.requestService.get(result.data.taskid).then(function (task) {
                    _this.requestTrackingService.add(task.id, task.name);
                });
                var modal = ModalHelpers.SuccessfulRequest(_this.modalService, {
                    title: 'Expand Cluster Request is Submitted',
                    container: '.usmClientApp'
                });
                modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide) {
                    $hide();
                    _this.locationService.path('/tasks/' + result.data.taskid);
                });
            }
            else {
                _this.logService.error('Unexpected response from Clusters.expand:', result);
            }
        });
    };
    ClusterExpandController.$inject = [
        '$q',
        '$log',
        '$scope',
        '$modal',
        '$timeout',
        '$location',
        '$routeParams',
        'OSDService',
        'UtilService',
        'ServerService',
        'ClusterService',
        'RequestService',
        'RequestTrackingService',
        'ConfigService'
    ];
    return ClusterExpandController;
})();
exports.ClusterExpandController = ClusterExpandController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
