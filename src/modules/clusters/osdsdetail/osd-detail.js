// <reference path="../typings/tsd.d.ts" />
var ModalHelpers = require('../../modal/modal-helpers');
var OsdDetailController = (function () {
    function OsdDetailController(qService, $modal, locationService, scopeService, timeoutService, logService, intervalSvc, serverService, clusterService, requestSvc, requestTrackingSvc) {
        var _this = this;
        this.qService = qService;
        this.$modal = $modal;
        this.locationService = locationService;
        this.scopeService = scopeService;
        this.timeoutService = timeoutService;
        this.logService = logService;
        this.intervalSvc = intervalSvc;
        this.serverService = serverService;
        this.clusterService = clusterService;
        this.requestSvc = requestSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        /* Applying filter on OSD list from the ng-repeat in UI. here we have 3 set of filters based on
        1)osd status 2)utilization 3) pg_status . and at a time only one set of filter can be applied .
        so that why here i have if condition to check the set of filter . */
        this.applyFilter = function (osd) {
            if (_this.activeFilter === 'osd_status') {
                return _this.filterList.OSDStatus[osd.status].checked || _this.isNoFilterSelected(_this.filterList.OSDStatus);
            }
            else if (_this.activeFilter === 'utilization') {
                return _this.filterList.Utilization[osd.usage.status].checked || _this.isNoFilterSelected(_this.filterList.Utilization);
            }
            else if (_this.activeFilter === 'pg_status') {
                if (_this.isNoFilterSelected(_this.filterList.PGStatus)) {
                    return true;
                }
                var result = false;
                _.each(_this.filterList.PGStatus, function (element) {
                    if (element.checked) {
                        if (osd.options1.pgsummary.pgarray.indexOf(element.name) === -1) {
                            return false;
                        }
                        else {
                            result = true;
                        }
                    }
                });
                return result;
            }
        };
        this.filteredOSD = {};
        this.isLeftSidebarShow = true;
        this.selection = { activeOsd: {}, allSelectedOsds: {} };
        this.activeFilter = 'osd_status';
        this.filterList = {};
        /* Note: This filterList is tightly coupled with status(osd,utilization,pg) order. if order
        of element will get change , it will break the filter features */
        this.filterList.OSDStatus = [
            { name: "Up-In", icon: "pficon pficon-ok", enabled: false, checked: false },
            { name: "Up-Out", icon: "pficon pficon-warning-triangle-o", enabled: false, checked: false },
            { name: "Down-In", icon: "pficon pficon-warning-triangle-o", enabled: false, checked: false },
            { name: "Down", icon: "fa fa-arrow-circle-o-down down-color", enabled: false, checked: false }
        ];
        this.filterList.PGStatus = [
            { name: "active", checked: false },
            { name: "clean", checked: false },
            { name: "creating", checked: false },
            { name: "replay", checked: false },
            { name: "splitting", checked: false },
            { name: "scrubbing", checked: false },
            { name: "degraded", checked: false },
            { name: "undersized", checked: false },
            { name: "repair", checked: false },
            { name: "recovery", checked: false },
            { name: "backfill", checked: false },
            { name: "remapped", checked: false },
            { name: "down", checked: false },
            { name: "inconsistent", checked: false },
            { name: "peering", checked: false },
            { name: "incomplete", checked: false },
            { name: "stale", checked: false },
        ];
        this.filterList.Utilization = [
            { name: "Full (95% or more)", icon: "progress-bar-full", enabled: false, checked: false },
            { name: "Near Full (85% or more)", icon: "progress-bar-near-full", enabled: false, checked: false },
            { name: "50% - 85%", icon: "progress-bar-average", enabled: false, checked: false },
            { name: "Less than 50%", icon: "progress-bar-normal", enabled: false, checked: false }
        ];
        this.storageProfileArray = [
            { 'name': 'All', 'value': '' },
            { 'name': 'Default', 'value': 'default' },
            { 'name': 'SAS', 'value': 'sas' },
            { 'name': 'SSD', 'value': 'ssd' }
        ];
        this.selectByStorageProfile = { storageprofile: '' };
        this.totalSelectedOSDs = [];
        this.timer = this.intervalSvc(function () { return _this.getOSDs(); }, 120 * 1000);
        this.scopeService.$on('$destroy', function () {
            _this.intervalSvc.cancel(_this.timer);
        });
        this.groupBy = 'node';
        this.getOSDs();
        this.paramsObject = locationService.search();
        if (Object.keys(this.paramsObject).length > 0) {
            if (this.paramsObject.active_filter !== undefined && this.paramsObject.filter_name !== undefined) {
                this.activeFilter = this.paramsObject.active_filter;
                if (this.paramsObject.active_filter === 'osd_status') {
                    this.paramsObject.filter_name.forEach(function (name) {
                        _.find(_this.filterList.OSDStatus, function (filter) {
                            return filter.name === name;
                        }).checked = true;
                    });
                }
                else if (this.paramsObject.active_filter === 'utilization') {
                    _.find(this.filterList.Utilization, function (filter) {
                        return filter.name.split(' ')[0] === _this.paramsObject.filter_name;
                    }).checked = true;
                }
            }
        }
        /* Here , watching the filteredOSD(filtered osd list) variable for any changes .
        so that we can select first value as a selected OSD in UI . and if there is no
        any element inside array, than no osd will be selected in UI. */
        this.scopeService.$watch(function () { return _this.filteredOSD; }, function (newValue, oldValue) {
            _this.maintainTotalSelectedOsds();
            _this.selection.activeOsd = null;
            _.forOwn(_this.filteredOSD, function (value, key) {
                if (value.length > 0) {
                    _this.selection.activeOsd = value[0];
                    return false;
                }
            });
        }, true);
    }
    /* Getting OSD list here */
    OsdDetailController.prototype.getOSDs = function () {
        var _this = this;
        if (this.type === 'Cluster') {
            this.clusterService.getSlus(this.id).then(function (slus) {
                _this.settingUpOsds(slus);
                _this.performGroupBy();
            });
        }
        else {
            this.serverService.getNodeSlus(this.id).then(function (slus) {
                /* Adding all possible storage profiles in drop down */
                var newStorageProfiles = _.pluck(slus, 'storageprofile');
                newStorageProfiles.forEach(function (profile) {
                    _this.storageProfileArray.push({ 'name': profile, 'value': profile });
                });
                _this.storageProfileArray = _.uniq(_this.storageProfileArray, 'value');
                _this.settingUpOsds(slus);
            });
        }
    };
    OsdDetailController.prototype.settingUpOsds = function (slus) {
        var _this = this;
        this.osdList = slus;
        (this.osdList || []).map(function (osd) {
            var pgArray = [];
            /* Adding the usage status for each osd , so that easily can find color code as well
            as filter for percentused in UI */
            osd.usage.status = (osd.usage.percentused >= 95 ? 0 : (osd.usage.percentused >= 85 ? 1 : (osd.usage.percentused >= 50 ? 2 : 3)));
            /* By default , we have disabled all filter . and Just here we are enabling the filters
            which are present in OSD list */
            if (!_this.filterList.OSDStatus[osd.status].enabled) {
                _this.filterList.OSDStatus[osd.status].enabled = true;
            }
            if (!_this.filterList.Utilization[osd.usage.status].enabled) {
                _this.filterList.Utilization[osd.usage.status].enabled = true;
            }
            /* we have pg summary in object format with '+' sign . example - "pgsummary":{"active+undersized+degraded":128} .
            Here , we want to each key after spliting with '+' sign , should be array elements
            so that easily can apply filter  */
            Object.keys(osd.options1.pgsummary).forEach(function (element) {
                pgArray = pgArray.concat(element.split("+"));
            });
            osd.options1.pgsummary.pgarray = pgArray;
            osd.node = osd.options1.node;
        });
    };
    /* Performing Group by */
    OsdDetailController.prototype.performGroupBy = function () {
        if (this.groupBy === 'node') {
            this.osdListGroupBy = _.groupBy(this.osdList, function (osd) { return osd.options1.node; });
        }
        else {
            this.osdListGroupBy = _.groupBy(this.osdList, function (osd) { return osd.storageprofile; });
        }
    };
    /* Calling on osd action changed and performing actions on selected osds */
    OsdDetailController.prototype.osdActionChange = function (osdAction) {
        var _this = this;
        var actionObject = (osdAction === 'mark_up' ? { up: true } : (osdAction === 'mark_in' ? { in: true } : { in: false }));
        if (osdAction === 'mark_out') {
            var modal = ModalHelpers.OsdActionConfirmation(this.$modal, {}, 'Are you sure you want to move the selected OSDs out of the cluster?');
            modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
                if (confirmed) {
                    _this.performOsdAction(actionObject);
                }
                $hide();
            });
        }
        else {
            this.performOsdAction(actionObject);
        }
    };
    /* Performing the Actions on selected osds */
    OsdDetailController.prototype.performOsdAction = function (actionObject) {
        var _this = this;
        if (this.totalSelectedOSDs.length === 0) {
            this.clusterService.slusAction(this.id, this.selection.activeOsd.sluid, actionObject).then(function (result) {
                _this.requestSvc.get(result.data.taskid).then(function (task) {
                    _this.requestTrackingSvc.add(task.id, task.name);
                });
            });
        }
        else {
            _.each(this.totalSelectedOSDs, function (osd) {
                _this.clusterService.slusAction(_this.id, osd.sluid, actionObject).then(function (result) {
                    _this.requestSvc.get(result.data.taskid).then(function (task) {
                        _this.requestTrackingSvc.add(task.id, task.name);
                    });
                });
            });
        }
        this.selection.allSelectedOsds = {};
        this.totalSelectedOSDs = [];
        this.timeoutService(function () { return _this.getOSDs(); }, 10000);
    };
    /* Maintaining the total selected osds by checkbox for Action */
    OsdDetailController.prototype.maintainTotalSelectedOsds = function () {
        var _this = this;
        this.totalSelectedOSDs = [];
        _.forOwn(this.filteredOSD, function (value, key) {
            _.each(value, function (osd) {
                if (_this.selection.allSelectedOsds[osd.sluid] === true) {
                    _this.totalSelectedOSDs.push(osd);
                }
            });
        });
    };
    /* It will return true/false based on given filter group.
    If there is no filter applied for this , than it will return true
    otherwise it will return false.*/
    OsdDetailController.prototype.isNoFilterSelected = function (filterObj) {
        for (var key in filterObj) {
            if (filterObj[key].checked) {
                return false;
            }
        }
        return true;
    };
    //Services that are used in this class.
    OsdDetailController.$inject = [
        '$q',
        '$modal',
        '$location',
        '$scope',
        '$timeout',
        '$log',
        '$interval',
        'ServerService',
        'ClusterService',
        'RequestService',
        'RequestTrackingService'
    ];
    return OsdDetailController;
})();
exports.OsdDetailController = OsdDetailController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
