// <reference path="../typings/tsd.d.ts" />
// <reference path="./cluster-modal.ts" />
var ClusterHelper = (function () {
    function ClusterHelper(utilService, requestService, logService, timeoutService) {
        this.utilService = utilService;
        this.requestService = requestService;
        this.logService = logService;
        this.timeoutService = timeoutService;
        //Different types of clusters.
        this.clusterTypes = [
            { ID: 1, type: 'gluster', desc: 'Gluster' },
            { ID: 2, type: 'ceph', desc: 'Ceph' }
        ];
        this.openstackServices = [
            { name: 'cinder', desc: 'Cinder (Block Volumes)' },
            { name: 'cinder-backup', desc: 'Cinder Backup (Block Volumes backup)' },
            { name: 'glance', desc: 'Glance (Images and Snapshots)' },
            { name: 'nova', desc: 'Nova (Ephemeral Storage)' },
        ];
        //This property indicates the states that a cluster can have.
        this.clusterStates = [
            { ID: 1, state: 'Inactive' },
            { ID: 2, state: 'Not Available' },
            { ID: 3, state: 'Active' },
            { ID: 4, state: 'Creating' },
            { ID: 5, state: 'Failed' }
        ];
    }
    ClusterHelper.prototype.getClusterTypes = function () {
        return this.clusterTypes;
    };
    ClusterHelper.prototype.getClusterType = function (type) {
        return _.find(this.clusterTypes, function (clusterType) {
            return clusterType.type === type;
        });
    };
    ClusterHelper.prototype.getOpenStackServices = function () {
        return this.openstackServices;
    };
    ClusterHelper.prototype.getClusterStatus = function (id) {
        return _.find(this.clusterStates, function (type) {
            return type.ID === id;
        });
    };
    ClusterHelper.prototype.callBack = function (cluster, host, result) {
        var _this = this;
        this.requestService.get(result).then(function (request) {
            if (request.status === "FAILED" || request.status === "FAILURE") {
                _this.logService.info('Failed  to accept host ' + host.hostname);
                host.state = "FAILED";
                host.task = undefined;
            }
            else if (request.status === "SUCCESS") {
                _this.logService.info('Accepted Host ' + host.hostname);
                host.state = "ACCEPTED";
                host.task = undefined;
                cluster.postAcceptHost(host);
            }
            else {
                _this.logService.info('Accepting Host ' + host.hostname);
                _this.timeoutService(function () { return _this.callBack(cluster, host, result); }, 5000);
            }
        });
    };
    /**
     * This function helps in accepting a host that already exsist.
     */
    ClusterHelper.prototype.acceptHost = function (cluster, host) {
        var _this = this;
        var saltfingerprint = {
            saltfingerprint: host.saltfingerprint
        };
        this.utilService.acceptHost(host.hostname, saltfingerprint).then(function (result) {
            _this.logService.info(result);
            host.state = "ACCEPTING";
            host.task = result;
            _this.callBack(cluster, host, result);
            _this.timeoutService(function () { return _this.callBack(cluster, host, result); }, 5000);
        });
    };
    /**
     * This function helps in accepting a new host that comes in.
     */
    ClusterHelper.prototype.acceptNewHost = function (cluster, host) {
        var hosts;
        hosts = {
            nodes: [
                {
                    "node_name": host.hostname,
                    "management_ip": host.ipaddress,
                    "ssh_username": host.username,
                    "ssh_password": host.password,
                    "ssh_key_fingerprint": host.fingerprint,
                    "ssh_port": 22
                }
            ]
        };
        // this.utilService.acceptHosts(hosts).then((result) => {
        //     this.logService.info(result);
        //     host.state = "ACCEPTING";
        //     host.task = result;
        //     this.callBack(cluster, host, result);
        //     this.timeoutService(()=>this.callBack(cluster,host,result), 5000);
        // });
    };
    /**
     * This function helps in adding a  new host with all its properties.
    */
    ClusterHelper.prototype.addNewHost = function (cluster, severService, $timeout, requestSvc) {
        var newHost = cluster.newHost;
        newHost.isVerifyingHost = true;
        newHost.errorMessage = "";
        newHost.cautionMessage = "";
        var hostObject = {
            "hostname": newHost.hostname,
            "sshfingerprint": newHost.sshfingerprint,
            "user": newHost.username,
            "password": newHost.password
        };
        //This called on success[promise].
        severService.add(hostObject).then(function (result) {
            var taskid = result.data.taskid;
            var callback = function () {
                requestSvc.get(taskid).then(function (task) {
                    if (task.completed) {
                        console.log('Added host ' + hostObject.hostname);
                        cluster.newHost = {};
                        cluster.fetchFreeHosts();
                    }
                    else {
                        console.log('Adding host ' + hostObject.hostname);
                        $timeout(callback, 5000);
                    }
                });
            };
            $timeout(callback, 5000);
        }, 
        //This a called on failure[promise].
        function () {
            cluster.newHost.errorMessage = " The username or password is incorrect.";
            cluster.newHost.isVerifyingHost = false;
        });
    };
    return ClusterHelper;
})();
exports.ClusterHelper = ClusterHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
