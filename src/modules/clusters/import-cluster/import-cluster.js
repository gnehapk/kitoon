// <reference path="../typings/tsd.d.ts" />
var ModalHelper = require('../../modal/modal-helpers');
var ImportClusterController = (function () {
    function ImportClusterController(logService, modalService, $location, clusterService, requestService, requestTrackingService, serverService) {
        this.logService = logService;
        this.modalService = modalService;
        this.$location = $location;
        this.clusterService = clusterService;
        this.requestService = requestService;
        this.requestTrackingService = requestTrackingService;
        this.serverService = serverService;
        this.loadAllFreeHosts();
        this.step = 1;
    }
    ImportClusterController.prototype.loadAllFreeHosts = function () {
        var _this = this;
        this.serverService.getAllFreeHosts().then(function (freeHosts) {
            _this.freeHosts = freeHosts;
        });
    };
    ImportClusterController.prototype.loadClusterDetails = function () {
        var _this = this;
        this.error = undefined;
        this.clusterService.getImportClusterDeatils(this.bootstrapNode.hostname).then(function (result) {
            if (result.status === 200) {
                _this.clusterSummary = result.data;
                _this.step = 2;
                if (!_this.clusterSummary.compatible) {
                    _this.error = "Cluster with version '" + _this.clusterSummary.version + "' is not compatible . Please ensure that Ceph 2.0 or greater is installed.";
                }
                else if (!_this.isAllHostsFound(_this.clusterSummary)) {
                    _this.error = "One or more of the hosts in this cluster cannot be found. Please ensure that Ceph 2.0 or greater is installed on this host and that it is available on the network. Click Refresh to search for this host again.";
                }
            }
            else {
                _this.error = "Failed to retrive cluster information from the selected host '" + _this.bootstrapNode.hostname + "'. Please select a monitor host and try again";
            }
        }, function (error) {
            _this.error = "Failed to retrive cluster information from the selected host '" + _this.bootstrapNode.hostname + "'. Please select a monitor host and try again";
        });
    };
    ImportClusterController.prototype.isAllHostsFound = function (clusterSummary) {
        return _.every(clusterSummary.nodes, function (node) { return node.found; });
    };
    ImportClusterController.prototype.import = function () {
        var _this = this;
        var nodes = _.map(this.clusterSummary.nodes, function (node) { return node.name; });
        var cluster = { 'bootstrapnode': this.bootstrapNode.hostname, 'type': 'ceph', 'nodes': nodes };
        this.clusterService.importCephCluster(cluster).then(function (result) {
            if (result.status === 202) {
                _this.requestService.get(result.data.taskid).then(function (task) {
                    _this.requestTrackingService.add(task.id, task.name);
                });
                var modal = ModalHelper.SuccessfulRequest(_this.modalService, {
                    title: 'Import Cluster request is being processed',
                    container: '.usmClientApp'
                });
                modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide) {
                    $hide();
                    _this.$location.path('/tasks/' + result.data.taskid);
                });
            }
            else {
                _this.logService.error('Failed to import the cluster:', result);
            }
        });
    };
    ImportClusterController.prototype.cancel = function () {
        this.$location.path('/clusters');
    };
    ImportClusterController.prototype.selectHost = function (host) {
        this.bootstrapNode = host;
    };
    ImportClusterController.$inject = ['$log', '$modal', '$location', 'ClusterService', 'RequestService', 'RequestTrackingService', 'ServerService'];
    return ImportClusterController;
})();
exports.ImportClusterController = ImportClusterController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
