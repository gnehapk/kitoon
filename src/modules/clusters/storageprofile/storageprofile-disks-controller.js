// <reference path="../typings/tsd.d.ts" />
var StorageProfileDisksController = (function () {
    function StorageProfileDisksController($q, serverSvc, storageProfileSvc) {
        this.$q = $q;
        this.serverSvc = serverSvc;
        this.storageProfileSvc = storageProfileSvc;
        this.add = false;
        this.addingProfile = false;
        this.loadData();
    }
    StorageProfileDisksController.prototype.loadData = function () {
        var _this = this;
        if (!this.hosts) {
            this.hosts = this.hostsCallback();
        }
        this.storageProfileDisks = {};
        this.storageProfileSvc.getList().then(function (list) {
            _this.storageProfiles = list;
            _this.selectedProfile = _this.storageProfiles[0];
            for (var _i = 0, _a = _this.storageProfiles; _i < _a.length; _i++) {
                var storageProfile = _a[_i];
                _this.storageProfileDisks[storageProfile.name] = [];
            }
            for (var _b = 0, _c = _this.hosts; _b < _c.length; _b++) {
                var host = _c[_b];
                for (var _d = 0, _e = host.disks; _d < _e.length; _d++) {
                    var disk = _e[_d];
                    if (disk.Type === 'disk' && disk.Used === false && disk.StorageProfile && disk.StorageProfile.length > 0) {
                        disk.nodeid = host.id;
                        disk.hostname = host.hostname.split('.')[0];
                        _this.storageProfileDisks[disk.StorageProfile].push(disk);
                    }
                }
            }
        });
    };
    StorageProfileDisksController.prototype.selectStorageProfile = function (selectedProfile) {
        this.selectedProfile = selectedProfile;
    };
    StorageProfileDisksController.prototype.getDisksForStorageProfile = function (storageProfile) {
        return storageProfile && this.storageProfileDisks[storageProfile.name];
    };
    StorageProfileDisksController.prototype.getStorageProfileSize = function (storageProfile) {
        var size = _.reduce(this.storageProfileDisks[storageProfile.name], function (size, disk) {
            return size + disk.Size;
        }, 0);
        return size;
    };
    StorageProfileDisksController.prototype.diskMoved = function (storageProfile, disk) {
        var _this = this;
        console.log(disk);
        this.serverSvc.updateDiskStorageProfile(disk.nodeid, disk.DiskId, storageProfile.name).then(function (result) {
            if (result.status === 200) {
                var prevProfile = disk['StorageProfile'];
                disk['StorageProfile'] = storageProfile.name;
                _.remove(_this.storageProfileDisks[prevProfile], function (d) {
                    return disk.nodeid === d.nodeid && disk.DevName === d.DevName;
                });
                _this.storageProfileDisks[storageProfile.name].push(disk);
            }
        });
    };
    StorageProfileDisksController.prototype.addProfile = function (profileName) {
        var _this = this;
        this.storageProfileSvc.add({ name: profileName }).then(function (result) {
            if (result.status === 200) {
                _this.add = false;
                return _this.storageProfileSvc.getByName(profileName);
            }
        }).then(function (storageProfile) {
            _this.storageProfiles.push(storageProfile);
            _this.storageProfileDisks[profileName] = [];
        });
    };
    StorageProfileDisksController.$inject = [
        '$q',
        'ServerService',
        'StorageProfileService'
    ];
    return StorageProfileDisksController;
})();
exports.StorageProfileDisksController = StorageProfileDisksController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
