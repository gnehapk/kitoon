var clusters_1 = require('../rest/clusters');
var cluster_helpers_1 = require('./cluster-helpers');
var ClustersController = (function () {
    /**
     * Here we do the dependency injection.
    */
    function ClustersController($q, $scope, $interval, $location, $modal, volumeService, clusterSvc, storageSvc, serverService, requestSvc, requestTrackingSvc) {
        var _this = this;
        this.$q = $q;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.$modal = $modal;
        this.volumeService = volumeService;
        this.clusterSvc = clusterSvc;
        this.storageSvc = storageSvc;
        this.serverService = serverService;
        this.requestSvc = requestSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.paramsObject = $location.search();
        if (Object.keys(this.paramsObject).length > 0) {
            this.updateSearchQuery(this.paramsObject);
        }
        this.clusterHelper = new cluster_helpers_1.ClusterHelper(null, null, null, null);
        this.timer = this.$interval(function () { return _this.refresh(); }, 10000);
        this.refresh();
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
    }
    ClustersController.prototype.isArray = function (data) {
        return data instanceof Array;
    };
    ClustersController.prototype.updateSearchQuery = function (paramsObject) {
        var _this = this;
        this.searchQuery = '';
        /*  paramsObject can have 3 case : -
                1) { status: [error,warning] , tab: <OSD,HOST,etc> }
                2) { tab: <OSD,HOST,etc> }
                3) { status: [error,warning] }
            and searchQuery will be like this : -
            /api/<ver>/clusters?status=ok&status=warning&tab=<HOST/OSD/etc>
        */
        Object.keys(paramsObject).forEach(function (value) {
            var joinedStr = "";
            if (paramsObject[value] instanceof Array) {
                var queryArray = paramsObject[value].map(function (status) {
                    return value + '=' + status;
                });
                joinedStr = queryArray.join('&');
            }
            else {
                joinedStr = value + "=" + paramsObject[value];
            }
            if (_this.searchQuery !== '') {
                _this.searchQuery += "&";
            }
            _this.searchQuery += joinedStr;
        });
    };
    ClustersController.prototype.refresh = function () {
        var _this = this;
        if (this.searchQuery === '') {
            this.clusterSvc.getList().then(function (clusters) {
                _this.loadData(clusters);
            });
        }
        else {
            this.clusterSvc.getFilteredList(this.searchQuery).then(function (clusters) {
                _this.loadData(clusters);
            });
        }
    };
    ClustersController.prototype.clearSearchQuery = function (key, itemIndex) {
        if (itemIndex === null) {
            delete this.paramsObject[key];
        }
        else {
            this.paramsObject[key].splice(itemIndex, 1);
        }
        this.updateSearchQuery(this.paramsObject);
        this.refresh();
    };
    /**
     * This function helps in loading the content of the page.
    */
    ClustersController.prototype.loadData = function (clusters) {
        var _this = this;
        var tempClusters = [];
        _.each(clusters, function (cluster) {
            var tempCluster = {
                clusterid: cluster.clusterid,
                cluster_name: cluster.name,
                cluster_type: cluster.type,
                state: cluster.state,
                status: cluster.status,
                used: undefined,
                no_of_hosts: 0,
                almwarncount: cluster.almwarncount,
                almcritcount: cluster.almcritcount,
                no_of_volumes_or_pools: 0,
                trendsCharts: { title: "", data: { xData: [], yData: [] }, config: {} },
                total_size: 0,
                free_size: 0,
                percent_used: 0,
                iops: 0
            };
            if (tempCluster.used === 0) {
                tempCluster.area_spline_values = [{ '1': 0 }, { '1': 0 }];
                tempCluster.gauge_values = 0.5;
            }
            _this.clusterSvc.getIOPSById(cluster.clusterid, "-10min").then(function (iops) {
                tempCluster.iops = iops[0].datapoints[0][0];
            });
            _this.clusterSvc.getClusterSummary(cluster.clusterid).then(function (summary) {
                tempCluster.total_size = summary.usage.total;
                tempCluster.free_size = summary.usage.total - summary.usage.used;
                tempCluster.percent_used = summary.usage.percentused;
            });
            _this.serverService.getListByCluster(cluster.clusterid).then(function (nodes) {
                tempCluster.no_of_hosts = nodes.length;
            });
            _this.clusterSvc.getAlerts(cluster.clusterid).then(function (alerts) {
                tempCluster.alerts = alerts;
            });
            if (_this.getClusterTypeTitle(cluster.type) === 'gluster') {
                _this.volumeService.getListByCluster(cluster.clusterid).then(function (volumes) {
                    tempCluster.no_of_volume_or_pools = volumes.length;
                });
            }
            else {
                _this.storageSvc.getListByCluster(cluster.clusterid).then(function (pools) {
                    tempCluster.no_of_volumes_or_pools = pools.length;
                });
            }
            tempClusters.push(tempCluster);
        });
        this.clusterList = tempClusters;
    };
    /**
     * This returns the color for the gauge.
    */
    ClustersController.prototype.getClusterGaugeColor = function (gaugeValue) {
        gaugeValue = gaugeValue * 10;
        if (gaugeValue >= 90) {
            return '#CC0000';
        }
        else if (gaugeValue >= 80) {
            return '#EC7A08';
        }
        else {
            return '#3F9C35';
        }
    };
    ClustersController.prototype.getClusterTypeTitle = function (type) {
        return this.clusterHelper.getClusterType(type).type;
    };
    ClustersController.prototype.getStorageTypeTitle = function (type) {
        return this.clusterHelper.getClusterType(type).type;
    };
    ClustersController.prototype.getStatusTitle = function (type) {
        return this.clusterHelper.getClusterStatus(type).state;
    };
    ClustersController.prototype.createNewCluster = function () {
        this.$location.path('/clusters/new');
    };
    ClustersController.prototype.importCluster = function () {
        this.$location.path("/clusters/import");
    };
    ClustersController.prototype.isExpandAvailable = function (clusterState) {
        return clusterState === clusters_1.ClusterState.ACTIVE;
    };
    ClustersController.prototype.isManageAvailable = function (clusterState) {
        return clusterState === clusters_1.ClusterState.UNMANAGED;
    };
    ClustersController.prototype.isUnManageAvailable = function (clusterState) {
        return clusterState === clusters_1.ClusterState.FAILED || clusterState === clusters_1.ClusterState.ACTIVE;
    };
    ClustersController.prototype.isForgetAvailable = function (clusterState) {
        return clusterState === clusters_1.ClusterState.UNMANAGED;
    };
    /**
     * Here we change the current path to '/clusters/expand/' where the cluster can be extended
     * by adding new nodes to it.
    */
    ClustersController.prototype.expandCluster = function (clusterID, clusterState) {
        if (!this.isExpandAvailable(clusterState)) {
            return;
        }
        this.$location.path('/clusters/expand/' + clusterID);
    };
    ClustersController.prototype.enableCluster = function (clusterID, clusterState) {
        var _this = this;
        if (!this.isManageAvailable(clusterState)) {
            return;
        }
        this.clusterSvc.enable(clusterID).then(function (result) {
            _this.requestSvc.get(result.taskid).then(function (task) {
                _this.requestTrackingSvc.add(task.id, task.name);
            });
        });
    };
    ClustersController.prototype.disableCluster = function (clusterID, clusterState) {
        var _this = this;
        if (!this.isUnManageAvailable(clusterState)) {
            return;
        }
        this.clusterSvc.disable(clusterID).then(function (result) {
            _this.requestSvc.get(result.taskid).then(function (task) {
                _this.requestTrackingSvc.add(task.id, task.name);
            });
        });
    };
    /**
     * This function helps in deleting the cluster with the help
     * of clusterID.
    */
    ClustersController.prototype.removeCluster = function (clusterID, clusterState) {
        var _this = this;
        if (!this.isForgetAvailable(clusterState)) {
            return;
        }
        this.clusterSvc.remove(clusterID).then(function (result) {
            _this.requestSvc.get(result.taskid).then(function (task) {
                _this.requestTrackingSvc.add(task.id, task.name);
            });
        });
    };
    //Services that are used in this class.
    ClustersController.$inject = [
        '$q',
        '$scope',
        '$interval',
        '$location',
        '$modal',
        'VolumeService',
        'ClusterService',
        'StorageService',
        'ServerService',
        'RequestService',
        'RequestTrackingService'
    ];
    return ClustersController;
})();
exports.ClustersController = ClustersController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
