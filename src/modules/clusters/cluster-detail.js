// <reference path="../typings/tsd.d.ts" />
var cluster_helpers_1 = require('./cluster-helpers');
var ModalHelpers = require('../modal/modal-helpers');
var libs_1 = require('../base/libs');
var ClusterDetailController = (function () {
    function ClusterDetailController(qService, scopeService, locationService, intervalSvc, logService, routeParamsSvc, modalSvc, clusterService, serverService, storageService, blockDeviceSvc, requestSvc, requestTrackingSvc) {
        var _this = this;
        this.qService = qService;
        this.scopeService = scopeService;
        this.locationService = locationService;
        this.intervalSvc = intervalSvc;
        this.logService = logService;
        this.routeParamsSvc = routeParamsSvc;
        this.modalSvc = modalSvc;
        this.clusterService = clusterService;
        this.serverService = serverService;
        this.storageService = storageService;
        this.blockDeviceSvc = blockDeviceSvc;
        this.requestSvc = requestSvc;
        this.requestTrackingSvc = requestTrackingSvc;
        this.rbds = [];
        this.status = ["Active", "Warning", "Error", "Unknown"];
        this.isLoading = { summaryData: true, clusterUtilizationData: true, trendsChartsData: true };
        this.clusterUtilization = { data: {}, config: {} };
        this.systemUtilization = { cpu: { data: {}, config: {} }, memory: { data: {}, config: {} } };
        this.mostUsedPools = [];
        this.clusterList = [];
        this.tabList = {
            Overview: 1,
            Hosts: 2,
            Pools: 3,
            RBDs: 4,
            OSDs: 5,
            Configuration: 6
        };
        this.tabIndex = this.tabList.Overview;
        this.paramsObject = locationService.search();
        if (this.paramsObject.tab !== undefined && this.tabList[this.paramsObject.tab] !== undefined) {
            this.tabIndex = this.tabList[this.paramsObject.tab];
        }
        this.clusterHelpers = new cluster_helpers_1.ClusterHelper(null, null, null, null);
        this.utilizationByProfile = {};
        this.id = this.routeParamsSvc['id'];
        this.cluster = {};
        this.capacity = {};
        /* For handling error in console: "url or json or rows or columns is required."
        we should initialize 'data' key with :{xData:[],yData:[]}. */
        this.trendsCharts = {
            overall: { title: "", data: { xData: [], yData: [] }, config: {} },
            cpu: { title: "", data: { xData: [], yData: [] }, config: {} },
            memory: { title: "", data: { xData: [], yData: [] }, config: {} },
            latency: { title: "", data: { xData: [], yData: [] }, config: {} },
            throughput: { title: "", data: { xData: [], yData: [] }, config: {} },
            iops: { title: "", data: { xData: [], yData: [] }, config: {} }
        };
        this.utilizations = {};
        this.hosts = { criticalAlerts: 0, error: 0, total: 0, unaccepted: 0 };
        this.pgs = { total: 0, error: 0, warning: 0 };
        this.osds = { criticalAlerts: 0, error: 0, nearfull: 0, total: 0 };
        this.objects = { total: 0, criticalAlerts: 0 };
        this.pools = { criticalAlerts: 0, down: 0, total: 0 };
        this.monitors = { criticalAlerts: 0, down: 0, total: 0 };
        this.timeSlots = [{ name: "Last 1 hour", value: "-1h" },
            { name: "Last 2 hours", value: "-2h" },
            { name: "Last 24 hours", value: "" }];
        this.selectedTimeSlot = this.timeSlots[0];
        this.clusterService.getList().then(function (clusters) {
            _this.clusterList = clusters;
        });
        this.getOverallUtilization();
        this.clusterService.get(this.id).then(function (cluster) { return _this.loadCluster(cluster); });
        this.timer = this.intervalSvc(function () {
            _this.loadClusterSummary();
            _this.refreshRBDs();
        }, 120 * 1000);
        this.scopeService.$on('$destroy', function () {
            _this.intervalSvc.cancel(_this.timer);
        });
        this.loadClusterSummary();
        this.refreshRBDs();
    }
    ClusterDetailController.prototype.loadCluster = function (cluster) {
        this.cluster.name = cluster.name;
        this.cluster.type = this.clusterHelpers.getClusterType(cluster.cluster_type);
        this.cluster.status = cluster.status;
        this.cluster.enabled = cluster.enabled;
        this.cluster.updatedate = new Date(cluster.usage.updatedat.replace(/-/g, "/").split('.')[0]);
        this.cluster.autoexpand = cluster.autoexpand;
    };
    ClusterDetailController.prototype.loadClusterSummary = function () {
        var _this = this;
        this.clusterService.getClusterSummary(this.id).then(function (summary) {
            _this.utilizations = summary.utilizations;
            _this.getClusterUtilization(summary.usage);
            _this.getUtilizationByProfile(summary.storageprofileusage, summary.monitoringplugins);
            _this.getMostUsedPools(summary.storageusage);
            _this.objects.total = summary.objectcount.num_objects;
            _this.objects.criticalAlerts = summary.objectcount.num_objects_degraded;
            _this.pools = summary.storagecount;
            _this.osds = summary.slucount;
            _this.hosts = summary.nodescount;
            /* Need to check whether "summary.providermonitoringdetails" is empty
            object or not . because might be sometime it can be empty object */
            if (summary.providermonitoringdetails.ceph) {
                _this.monitors = summary.providermonitoringdetails.ceph.monitor;
                _this.pgs = summary.providermonitoringdetails.ceph.pgnum;
            }
            /* In "changeTimeSlot" function calling cpu and memory utilization api
            and that need "this.utilizations" data . so first we have this data from
            api . than only will call this "changeTimeSlot" function. so that we will
            have accurate data */
            _this.changeTimeSlot(_this.selectedTimeSlot);
            _this.isLoading.summaryData = false;
        });
    };
    ClusterDetailController.prototype.getClusterUtilization = function (usage) {
        this.capacity = usage;
        this.clusterUtilization.data = usage;
        this.clusterUtilization.config.chartId = "utilizationChart";
        this.clusterUtilization.config.thresholds = { 'warning': '60', 'error': '90' };
        this.clusterUtilization.config.tooltipFn = function (d) {
            return '<span class="donut-tooltip-pf"style="white-space: nowrap;">' +
                libs_1.numeral(d[0].value).format('0 b') + ' ' + d[0].name +
                '</span>';
        };
        this.clusterUtilization.config.centerLabelFn = function () {
            return ((usage.used * 100) / usage.total).toFixed(1) + "% Used";
        };
        this.isLoading.clusterUtilizationData = false;
    };
    ClusterDetailController.prototype.getUtilizationByProfile = function (profiles, monitoringplugins) {
        var _this = this;
        this.utilizationByProfile.threshold = {};
        var storageUtilizationThreshold = _.find(monitoringplugins, function (element) {
            return element.name === 'storage_profile_utilization';
        });
        storageUtilizationThreshold.configs.forEach(function (config) {
            _this.utilizationByProfile.threshold[config.type] = config.value;
        });
        this.utilizationByProfile.profiles = [];
        var othersProfile = { "used": 0, "total": 0 };
        Object.keys(profiles).forEach(function (profile) {
            var usedData = profiles[profile]["utilization"];
            if (profile === 'default' || profile === 'sas' || profile === 'ssd') {
                _this.utilizationByProfile.profiles.push({ "usage": usedData, "subtitle": profile });
            }
            else {
                othersProfile.used = othersProfile.used + profiles[profile]["utilization"]["used"];
                othersProfile.total = othersProfile.total + profiles[profile]["utilization"]["total"];
            }
        });
        if (othersProfile.total > 0) {
            this.utilizationByProfile.profiles.push({ "usage": { "total": othersProfile.total, "used": othersProfile.used }, "subtitle": "Others" });
        }
    };
    ClusterDetailController.prototype.getOverallUtilization = function () {
        var _this = this;
        this.clusterService.getClusterOverallUtilization(this.id).then(function (overall_utilization) {
            _this.setGraphData(overall_utilization, "overall", "", "%", "large");
        });
    };
    ClusterDetailController.prototype.getCpuUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.utilizations.cpupercentageusage !== undefined) {
            usage = { "total": 100, "used": this.utilizations.cpupercentageusage };
        }
        this.setGraphUtilization(usage, 'cpu');
        this.clusterService.getClusterCpuUtilization(this.id, timeSlot.value).then(function (cpu_utilization) {
            _this.setGraphData(cpu_utilization, "cpu", "", "%", "large");
        });
    };
    ClusterDetailController.prototype.getMemoryUtilization = function (timeSlot) {
        var _this = this;
        var usage = { "total": 0, "used": 0 };
        if (this.utilizations.memoryusage !== undefined) {
            usage = { "total": this.utilizations.memoryusage.total, "used": this.utilizations.memoryusage.used };
        }
        this.setGraphUtilization(usage, 'memory');
        this.clusterService.getClusterMemoryUtilization(this.id, timeSlot.value).then(function (memory_utilization) {
            _this.setGraphData(memory_utilization, "memory", "", "%", "large");
        });
    };
    ClusterDetailController.prototype.getIOPS = function (timeSlot) {
        var _this = this;
        this.clusterService.getIOPS(this.id, timeSlot.value).then(function (iops) {
            _this.setGraphData(iops, "iops", "IOPS", "", "compact");
        });
    };
    ClusterDetailController.prototype.getThroughput = function (timeSlot) {
        var _this = this;
        this.clusterService.getThroughput(this.id, timeSlot.value).then(function (throughput) {
            _this.setGraphData(throughput, "throughput", "Throughput", "B/s", "compact");
        });
    };
    ClusterDetailController.prototype.getNetworkLatency = function (timeSlot) {
        var _this = this;
        this.clusterService.getNetworkLatency(this.id, timeSlot.value).then(function (network_latency) {
            _this.setGraphData(network_latency, "latency", "Latency", "ms", "compact");
        });
    };
    ClusterDetailController.prototype.setGraphUtilization = function (usage, value) {
        this.systemUtilization[value].data = usage;
        this.systemUtilization[value].config.chartId = value;
        this.systemUtilization[value].config.thresholds = { 'warning': '60', 'error': '90' };
        this.systemUtilization[value].config.tooltipFn = function (d) {
            return '<span class="donut-tooltip-pf"style="white-space: nowrap;">' +
                ((d[0].value * 100) / usage.total).toFixed(1) + '% ' + d[0].name +
                '</span>';
        };
        this.systemUtilization[value].config.centerLabelFn = function () {
            return ((usage.used * 100) / usage.total).toFixed(1) + "% Used";
        };
    };
    ClusterDetailController.prototype.setGraphData = function (graphArray, value, graphTitle, graphUnits, graphLayout) {
        var times = [];
        var used = [];
        times.push("dates");
        used.push("used");
        var isDataAvailable = false;
        if (graphArray.length !== 0) {
            var usageDataArray = graphArray[0].datapoints;
            isDataAvailable = (usageDataArray.length > 0 ? true : false);
            for (var index in usageDataArray) {
                var subArray = usageDataArray[index];
                times.push(new Date(subArray[1]));
                used.push(subArray[0].toFixed(1));
            }
        }
        this.trendsCharts[value] = {
            title: graphTitle,
            data: {
                dataAvailable: isDataAvailable,
                total: 100,
                xData: times,
                yData: used
            },
            config: {
                chartId: value,
                title: graphTitle,
                layout: graphLayout,
                valueType: 'actual',
                units: graphUnits,
                tooltipFn: function (d) {
                    return '<span class="donut-tooltip-pf">' +
                        d[0].value + ' ' + graphUnits +
                        '</span>';
                }
            }
        };
        this.isLoading.trendsChartsData = false;
    };
    ClusterDetailController.prototype.changeTimeSlot = function (time) {
        this.selectedTimeSlot = time;
        this.getCpuUtilization(this.selectedTimeSlot);
        this.getMemoryUtilization(this.selectedTimeSlot);
        this.getIOPS(this.selectedTimeSlot);
        this.getThroughput(this.selectedTimeSlot);
        this.getNetworkLatency(this.selectedTimeSlot);
    };
    ClusterDetailController.prototype.getMostUsedPools = function (mostUsedPools) {
        var _this = this;
        this.mostUsedPools = [];
        _.each(mostUsedPools, function (pool) {
            _this.mostUsedPools.push({ "title": pool["name"], "data": { total: 100, used: pool["usage"]["percentused"] } });
        });
    };
    ClusterDetailController.prototype.setTab = function (newTab) {
        this.locationService.search({});
        this.tabIndex = newTab;
    };
    ClusterDetailController.prototype.isSet = function (tabNum) {
        return this.tabIndex === tabNum;
    };
    ClusterDetailController.prototype.refreshRBDs = function () {
        var _this = this;
        this.blockDeviceSvc.getListByCluster(this.id).then(function (blockdevices) {
            _this.loadRBDData(blockdevices);
        });
    };
    ClusterDetailController.prototype.loadRBDData = function (blockdevices) {
        var _this = this;
        _.each(this.rbds, function (blockdevice) {
            blockdevice['updated'] = false;
        });
        _.each(blockdevices, function (blockdevice) {
            var item = _.find(_this.rbds, function (item) { return item.id === blockdevice.id; });
            if (item) {
                item.size = blockdevice.size;
                item['updated'] = true;
            }
            else {
                blockdevice['updated'] = true;
                _this.rbds.push(blockdevice);
            }
        });
        _.remove(this.rbds, function (blockdevice) { return !blockdevice['updated']; });
    };
    ClusterDetailController.prototype.getFormatedSize = function (size) {
        return libs_1.numeral(size).format('0 b');
    };
    ClusterDetailController.prototype.createRBD = function () {
        this.locationService.path('/storage/new');
    };
    ClusterDetailController.prototype.showRBDResizeForm = function (rbd) {
        rbd['resize'] = true;
        var sizeValue = rbd.size.substring(0, rbd.size.length - 2);
        var sizeUnit = rbd.size.substring(rbd.size.length - 2);
        var size = { value: parseInt(sizeValue), unit: sizeUnit };
        rbd['targetSize'] = size;
    };
    ClusterDetailController.prototype.updateRBDSize = function (rbd, newSize) {
        rbd['targetSize'] = newSize;
    };
    ClusterDetailController.prototype.resizeRBD = function (rbd) {
        var _this = this;
        var targetSize = rbd['targetSize'];
        var size = { size: targetSize.value + targetSize.unit };
        this.blockDeviceSvc.resize(rbd.clusterid, rbd.storageid, rbd.id, size).then(function (task) {
            _this.requestSvc.get(task.data.taskid).then(function (result) {
                _this.requestTrackingSvc.add(result.id, result.name);
            });
        });
        rbd['resize'] = false;
    };
    ClusterDetailController.prototype.cancelRBDResize = function (rbd) {
        rbd['resize'] = false;
    };
    ClusterDetailController.prototype.removeRBD = function (rbd) {
        var _this = this;
        var modal = ModalHelpers.RemoveConfirmation(this.modalSvc, {});
        modal.$scope.$hide = _.wrap(modal.$scope.$hide, function ($hide, confirmed) {
            if (confirmed) {
                _this.blockDeviceSvc.remove(rbd.clusterid, rbd.storageid, rbd.id).then(function (task) {
                    _this.requestSvc.get(task.data.taskid).then(function (result) {
                        _this.requestTrackingSvc.add(result.id, result.name);
                    });
                });
            }
            $hide();
        });
    };
    //Services that are used in this class.
    ClusterDetailController.$inject = [
        '$q',
        '$scope',
        '$location',
        '$interval',
        '$log',
        '$routeParams',
        '$modal',
        'ClusterService',
        'ServerService',
        'StorageService',
        'BlockDeviceService',
        'RequestService',
        'RequestTrackingService'
    ];
    return ClusterDetailController;
})();
exports.ClusterDetailController = ClusterDetailController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
