/// <reference path="../../../typings/tsd.d.ts" />
var BlockDeviceService = (function () {
    function BlockDeviceService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getList**
    // **@returns** a promise with all Block devices.
    BlockDeviceService.prototype.getList = function () {
        return this.rest.all('blockdevices').getList().then(function (blockdevices) {
            return blockdevices;
        });
    };
    // **getListByCluster**
    // **@returns** a promise with all Block devices for the given cluster.
    BlockDeviceService.prototype.getListByCluster = function (clusterid) {
        return this.rest.one('clusters', clusterid).all('blockdevices').getList().then(function (blockdevices) {
            return blockdevices;
        });
    };
    // **Add**
    // **@returns** add a new block device
    BlockDeviceService.prototype.add = function (clusterId, storageId, blockdevice) {
        return this.restFull.one('clusters', clusterId).one('storages', storageId).all('blockdevices').post(blockdevice);
    };
    // **Resize**
    // **@param** blockDeviceId - id of block device to be resized
    // **@returns** a promise with the request id for the operation.
    BlockDeviceService.prototype.resize = function (clusterId, storageId, blockDeviceId, size) {
        return this.restFull.one('clusters', clusterId).one('storages', storageId).one('blockdevices', blockDeviceId).patch(size);
    };
    // **Remove**
    // **@param** id - id of block device to be removed
    // This is a **destructive** operation and will remove
    // any data on this block device.
    // **@returns** a promise with the request id for the operation.
    BlockDeviceService.prototype.remove = function (clusterId, storageId, blockDeviceId) {
        return this.restFull.one('clusters', clusterId).one('storages', storageId).one('blockdevices', blockDeviceId).remove();
    };
    BlockDeviceService.$inject = ['Restangular'];
    return BlockDeviceService;
})();
exports.BlockDeviceService = BlockDeviceService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdC9ibG9ja2RldmljZS50cyJdLCJuYW1lcyI6WyJCbG9ja0RldmljZVNlcnZpY2UiLCJCbG9ja0RldmljZVNlcnZpY2UuY29uc3RydWN0b3IiLCJCbG9ja0RldmljZVNlcnZpY2UuZ2V0TGlzdCIsIkJsb2NrRGV2aWNlU2VydmljZS5nZXRMaXN0QnlDbHVzdGVyIiwiQmxvY2tEZXZpY2VTZXJ2aWNlLmFkZCIsIkJsb2NrRGV2aWNlU2VydmljZS5yZXNpemUiLCJCbG9ja0RldmljZVNlcnZpY2UucmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFjbEQ7SUFJSUEsNEJBQVlBLElBQTZCQTtRQUNyQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtZQUM5Q0EscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUNqREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSEEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtZQUNsREEscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUM3Q0EscUJBQXFCQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREQsY0FBY0E7SUFDZEEsaURBQWlEQTtJQUNqREEsb0NBQU9BLEdBQVBBO1FBQ0lFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLE9BQU9BLEVBQWVBLENBQUNBLElBQUlBLENBQUNBLFVBQVNBLFlBQWdDQTtZQUN0RyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBQ3hCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREYsdUJBQXVCQTtJQUN2QkEsdUVBQXVFQTtJQUN2RUEsNkNBQWdCQSxHQUFoQkEsVUFBaUJBLFNBQWlCQTtRQUM5QkcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsRUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBU0EsWUFBZ0NBO1lBQ2pJLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDeEIsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVESCxVQUFVQTtJQUNWQSxzQ0FBc0NBO0lBQ3RDQSxnQ0FBR0EsR0FBSEEsVUFBSUEsU0FBaUJBLEVBQUVBLFNBQWlCQSxFQUFFQSxXQUF3QkE7UUFDOURJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLEVBQUVBLFNBQVNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO0lBQ3JIQSxDQUFDQTtJQUVESixhQUFhQTtJQUNiQSw4REFBOERBO0lBQzlEQSxnRUFBZ0VBO0lBQ2hFQSxtQ0FBTUEsR0FBTkEsVUFBT0EsU0FBaUJBLEVBQUVBLFNBQWlCQSxFQUFFQSxhQUFxQkEsRUFBRUEsSUFBc0JBO1FBQ3RGSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxjQUFjQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUM5SEEsQ0FBQ0E7SUFFREwsYUFBYUE7SUFDYkEsbURBQW1EQTtJQUNuREEsc0RBQXNEQTtJQUN0REEsaUNBQWlDQTtJQUNqQ0EsZ0VBQWdFQTtJQUNoRUEsbUNBQU1BLEdBQU5BLFVBQU9BLFNBQWlCQSxFQUFFQSxTQUFpQkEsRUFBRUEsYUFBcUJBO1FBQzlETSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxjQUFjQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtJQUMzSEEsQ0FBQ0E7SUEvQ01OLDBCQUFPQSxHQUFrQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUFnRHBEQSx5QkFBQ0E7QUFBREEsQ0FuREEsQUFtRENBLElBQUE7QUFuRFksMEJBQWtCLHFCQW1EOUIsQ0FBQSIsImZpbGUiOiJtb2R1bGVzL3Jlc3QvYmxvY2tkZXZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmxvY2tEZXZpY2Uge1xuICAgIGlkPzogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBjbHVzdGVyaWQ/OiBzdHJpbmcsXG4gICAgY2x1c3Rlcm5hbWU/OiBzdHJpbmcsXG4gICAgc3RvcmFnZWlkPzogc3RyaW5nLFxuICAgIHN0b3JhZ2VuYW1lPzogc3RyaW5nLFxuICAgIHRhZ3M/OiBzdHJpbmdbXSxcbiAgICBzaXplOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IHt9XG59XG5cbmV4cG9ydCBjbGFzcyBCbG9ja0RldmljZVNlcnZpY2Uge1xuICAgIHJlc3Q6IHJlc3Rhbmd1bGFyLklTZXJ2aWNlO1xuICAgIHJlc3RGdWxsOiByZXN0YW5ndWxhci5JU2VydmljZTtcbiAgICBzdGF0aWMgJGluamVjdDogQXJyYXk8c3RyaW5nPiA9IFsnUmVzdGFuZ3VsYXInXTtcbiAgICBjb25zdHJ1Y3RvcihyZXN0OiByZXN0YW5ndWxhci5JQ29sbGVjdGlvbikge1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0LndpdGhDb25maWcoKFJlc3Rhbmd1bGFyQ29uZmlndXJlcikgPT4ge1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEJhc2VVcmwoJy9hcGkvdjEvJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlc3RGdWxsID0gcmVzdC53aXRoQ29uZmlnKChSZXN0YW5ndWxhckNvbmZpZ3VyZXIpID0+IHtcbiAgICAgICAgICAgIFJlc3Rhbmd1bGFyQ29uZmlndXJlci5zZXRCYXNlVXJsKCcvYXBpL3YxLycpO1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEZ1bGxSZXNwb25zZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggYWxsIEJsb2NrIGRldmljZXMuXG4gICAgZ2V0TGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5hbGwoJ2Jsb2NrZGV2aWNlcycpLmdldExpc3Q8QmxvY2tEZXZpY2U+KCkudGhlbihmdW5jdGlvbihibG9ja2RldmljZXM6IEFycmF5PEJsb2NrRGV2aWNlPikge1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrZGV2aWNlcztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0QnlDbHVzdGVyKipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggYWxsIEJsb2NrIGRldmljZXMgZm9yIHRoZSBnaXZlbiBjbHVzdGVyLlxuICAgIGdldExpc3RCeUNsdXN0ZXIoY2x1c3RlcmlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ2NsdXN0ZXJzJywgY2x1c3RlcmlkKS5hbGwoJ2Jsb2NrZGV2aWNlcycpLmdldExpc3Q8QmxvY2tEZXZpY2U+KCkudGhlbihmdW5jdGlvbihibG9ja2RldmljZXM6IEFycmF5PEJsb2NrRGV2aWNlPikge1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrZGV2aWNlcztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipBZGQqKlxuICAgIC8vICoqQHJldHVybnMqKiBhZGQgYSBuZXcgYmxvY2sgZGV2aWNlXG4gICAgYWRkKGNsdXN0ZXJJZDogc3RyaW5nLCBzdG9yYWdlSWQ6IHN0cmluZywgYmxvY2tkZXZpY2U6IEJsb2NrRGV2aWNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RGdWxsLm9uZSgnY2x1c3RlcnMnLCBjbHVzdGVySWQpLm9uZSgnc3RvcmFnZXMnLCBzdG9yYWdlSWQpLmFsbCgnYmxvY2tkZXZpY2VzJykucG9zdChibG9ja2RldmljZSk7XG4gICAgfVxuXG4gICAgLy8gKipSZXNpemUqKlxuICAgIC8vICoqQHBhcmFtKiogYmxvY2tEZXZpY2VJZCAtIGlkIG9mIGJsb2NrIGRldmljZSB0byBiZSByZXNpemVkXG4gICAgLy8gKipAcmV0dXJucyoqIGEgcHJvbWlzZSB3aXRoIHRoZSByZXF1ZXN0IGlkIGZvciB0aGUgb3BlcmF0aW9uLlxuICAgIHJlc2l6ZShjbHVzdGVySWQ6IHN0cmluZywgc3RvcmFnZUlkOiBzdHJpbmcsIGJsb2NrRGV2aWNlSWQ6IHN0cmluZywgc2l6ZTogeyBzaXplOiBzdHJpbmcgfSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0RnVsbC5vbmUoJ2NsdXN0ZXJzJywgY2x1c3RlcklkKS5vbmUoJ3N0b3JhZ2VzJywgc3RvcmFnZUlkKS5vbmUoJ2Jsb2NrZGV2aWNlcycsIGJsb2NrRGV2aWNlSWQpLnBhdGNoKHNpemUpO1xuICAgIH1cblxuICAgIC8vICoqUmVtb3ZlKipcbiAgICAvLyAqKkBwYXJhbSoqIGlkIC0gaWQgb2YgYmxvY2sgZGV2aWNlIHRvIGJlIHJlbW92ZWRcbiAgICAvLyBUaGlzIGlzIGEgKipkZXN0cnVjdGl2ZSoqIG9wZXJhdGlvbiBhbmQgd2lsbCByZW1vdmVcbiAgICAvLyBhbnkgZGF0YSBvbiB0aGlzIGJsb2NrIGRldmljZS5cbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggdGhlIHJlcXVlc3QgaWQgZm9yIHRoZSBvcGVyYXRpb24uXG4gICAgcmVtb3ZlKGNsdXN0ZXJJZDogc3RyaW5nLCBzdG9yYWdlSWQ6IHN0cmluZywgYmxvY2tEZXZpY2VJZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RGdWxsLm9uZSgnY2x1c3RlcnMnLCBjbHVzdGVySWQpLm9uZSgnc3RvcmFnZXMnLCBzdG9yYWdlSWQpLm9uZSgnYmxvY2tkZXZpY2VzJywgYmxvY2tEZXZpY2VJZCkucmVtb3ZlKCk7XG4gICAgfVxufVxuIl19
