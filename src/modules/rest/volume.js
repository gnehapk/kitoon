/// <reference path="../../../typings/tsd.d.ts" />
var VolumeService = (function () {
    function VolumeService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/gluster');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/gluster');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getList**
    // **@returns** a promise with all volumes.
    VolumeService.prototype.getList = function () {
        return this.rest.all('volumes').getList().then(function (volumes) {
            return volumes;
        });
    };
    // **getListByCluster
    // **@returns** a promise with all volumes of the cluster.
    VolumeService.prototype.getListByCluster = function (clusterId) {
        return this.rest.all('volumes').getList().then(function (volumes) {
            return _.filter(volumes, function (volume) {
                return volume.cluster === clusterId;
            });
        });
    };
    // **get**
    // **@returns** a promise with volume metadata.
    VolumeService.prototype.get = function (id) {
        return this.rest.one('volumes', id).get().then(function (volume) {
            return volume;
        });
    };
    // **get**
    // **@returns** a promise with list of bricks.
    VolumeService.prototype.getBricks = function (id) {
        return this.rest.one('volumes', id).all('bricks').getList().then(function (bricks) {
            return bricks;
        });
    };
    // **getCapacity**
    // **@returns** a promise with volume capacity in bytes.
    VolumeService.prototype.getCapacity = function (id) {
        return this.rest.one('volumes', id).one('utilization').get().then(function (capacity) {
            return { total: capacity.fs_size, free: capacity.fs_free, volumeId: id };
        });
    };
    // **create**
    // **@param** volume - Information about the volume and list of bricks.
    // **@returns** a promise which returns a request id to track the task.
    VolumeService.prototype.create = function (volume) {
        return this.restFull.all('volumes').post(volume);
    };
    // **create**
    // **@param** volume - Information about the volume and list of bricks.
    // **@returns** a promise which returns a request id to track the task.
    VolumeService.prototype.expand = function (volume) {
        return this.restFull.all('bricks').post(volume);
    };
    // **start**
    // **@param** id - Volume Identifier.
    // **@returns** a promise with status code.
    VolumeService.prototype.start = function (id) {
        return this.restFull.one('volumes', id).one('start').get();
    };
    VolumeService.$inject = ['Restangular'];
    return VolumeService;
})();
exports.VolumeService = VolumeService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdC92b2x1bWUudHMiXSwibmFtZXMiOlsiVm9sdW1lU2VydmljZSIsIlZvbHVtZVNlcnZpY2UuY29uc3RydWN0b3IiLCJWb2x1bWVTZXJ2aWNlLmdldExpc3QiLCJWb2x1bWVTZXJ2aWNlLmdldExpc3RCeUNsdXN0ZXIiLCJWb2x1bWVTZXJ2aWNlLmdldCIsIlZvbHVtZVNlcnZpY2UuZ2V0QnJpY2tzIiwiVm9sdW1lU2VydmljZS5nZXRDYXBhY2l0eSIsIlZvbHVtZVNlcnZpY2UuY3JlYXRlIiwiVm9sdW1lU2VydmljZS5leHBhbmQiLCJWb2x1bWVTZXJ2aWNlLnN0YXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFFbEQ7SUFJSUEsdUJBQVlBLElBQTZCQTtRQUNyQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtZQUM5Q0EscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNIQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFDQSxxQkFBcUJBO1lBQ2xEQSxxQkFBcUJBLENBQUNBLFVBQVVBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7WUFDcERBLHFCQUFxQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaERBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURELGNBQWNBO0lBQ2RBLDJDQUEyQ0E7SUFDM0NBLCtCQUFPQSxHQUFQQTtRQUNJRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxPQUFPQTtZQUMzRCxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25C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QSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQTtJQUMvREEsQ0FBQ0E7SUF4RU1ULHFCQUFPQSxHQUFrQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUF5RXBEQSxvQkFBQ0E7QUFBREEsQ0E1RUEsQUE0RUNBLElBQUE7QUE1RVkscUJBQWEsZ0JBNEV6QixDQUFBIiwiZmlsZSI6Im1vZHVsZXMvcmVzdC92b2x1bWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cbmV4cG9ydCBjbGFzcyBWb2x1bWVTZXJ2aWNlIHtcbiAgICByZXN0OiByZXN0YW5ndWxhci5JU2VydmljZTtcbiAgICByZXN0RnVsbDogcmVzdGFuZ3VsYXIuSVNlcnZpY2U7XG4gICAgc3RhdGljICRpbmplY3Q6IEFycmF5PHN0cmluZz4gPSBbJ1Jlc3Rhbmd1bGFyJ107XG4gICAgY29uc3RydWN0b3IocmVzdDogcmVzdGFuZ3VsYXIuSUNvbGxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5yZXN0ID0gcmVzdC53aXRoQ29uZmlnKChSZXN0YW5ndWxhckNvbmZpZ3VyZXIpID0+IHtcbiAgICAgICAgICAgIFJlc3Rhbmd1bGFyQ29uZmlndXJlci5zZXRCYXNlVXJsKCcvYXBpL3YxL2dsdXN0ZXInKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzdEZ1bGwgPSByZXN0LndpdGhDb25maWcoKFJlc3Rhbmd1bGFyQ29uZmlndXJlcikgPT4ge1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEJhc2VVcmwoJy9hcGkvdjEvZ2x1c3RlcicpO1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEZ1bGxSZXNwb25zZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggYWxsIHZvbHVtZXMuXG4gICAgZ2V0TGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5hbGwoJ3ZvbHVtZXMnKS5nZXRMaXN0KCkudGhlbihmdW5jdGlvbih2b2x1bWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9sdW1lcztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0QnlDbHVzdGVyXG4gICAgLy8gKipAcmV0dXJucyoqIGEgcHJvbWlzZSB3aXRoIGFsbCB2b2x1bWVzIG9mIHRoZSBjbHVzdGVyLlxuICAgIGdldExpc3RCeUNsdXN0ZXIoY2x1c3RlcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3QuYWxsKCd2b2x1bWVzJykuZ2V0TGlzdCgpLnRoZW4oZnVuY3Rpb24odm9sdW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHZvbHVtZXMsIGZ1bmN0aW9uKHZvbHVtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2b2x1bWUuY2x1c3RlciA9PT0gY2x1c3RlcklkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqZ2V0KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggdm9sdW1lIG1ldGFkYXRhLlxuICAgIGdldChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0Lm9uZSgndm9sdW1lcycsIGlkKS5nZXQoKS50aGVuKGZ1bmN0aW9uKHZvbHVtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvbHVtZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXQqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCBsaXN0IG9mIGJyaWNrcy5cbiAgICBnZXRCcmlja3MoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ3ZvbHVtZXMnLCBpZCkuYWxsKCdicmlja3MnKS5nZXRMaXN0KCkudGhlbihmdW5jdGlvbihicmlja3MpIHtcbiAgICAgICAgICAgIHJldHVybiBicmlja3M7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqZ2V0Q2FwYWNpdHkqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCB2b2x1bWUgY2FwYWNpdHkgaW4gYnl0ZXMuXG4gICAgZ2V0Q2FwYWNpdHkoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ3ZvbHVtZXMnLCBpZCkub25lKCd1dGlsaXphdGlvbicpLmdldCgpLnRoZW4oZnVuY3Rpb24oY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvdGFsOiBjYXBhY2l0eS5mc19zaXplLCBmcmVlOiBjYXBhY2l0eS5mc19mcmVlLCB2b2x1bWVJZDogaWQgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipjcmVhdGUqKlxuICAgIC8vICoqQHBhcmFtKiogdm9sdW1lIC0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHZvbHVtZSBhbmQgbGlzdCBvZiBicmlja3MuXG4gICAgLy8gKipAcmV0dXJucyoqIGEgcHJvbWlzZSB3aGljaCByZXR1cm5zIGEgcmVxdWVzdCBpZCB0byB0cmFjayB0aGUgdGFzay5cbiAgICBjcmVhdGUodm9sdW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RGdWxsLmFsbCgndm9sdW1lcycpLnBvc3Qodm9sdW1lKTtcbiAgICB9XG5cbiAgICAvLyAqKmNyZWF0ZSoqXG4gICAgLy8gKipAcGFyYW0qKiB2b2x1bWUgLSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdm9sdW1lIGFuZCBsaXN0IG9mIGJyaWNrcy5cbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdoaWNoIHJldHVybnMgYSByZXF1ZXN0IGlkIHRvIHRyYWNrIHRoZSB0YXNrLlxuICAgIGV4cGFuZCh2b2x1bWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdEZ1bGwuYWxsKCdicmlja3MnKS5wb3N0KHZvbHVtZSk7XG4gICAgfVxuXG4gICAgLy8gKipzdGFydCoqXG4gICAgLy8gKipAcGFyYW0qKiBpZCAtIFZvbHVtZSBJZGVudGlmaWVyLlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCBzdGF0dXMgY29kZS5cbiAgICBzdGFydChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0RnVsbC5vbmUoJ3ZvbHVtZXMnLCBpZCkub25lKCdzdGFydCcpLmdldCgpO1xuICAgIH1cbn1cbiJdfQ==
