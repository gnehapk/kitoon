/// <reference path="../../../typings/tsd.d.ts" />
var StorageService = (function () {
    function StorageService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getFilteredList**
    // **@returns** a promise with all storages with query string.
    StorageService.prototype.getFilteredList = function (queryString) {
        if (queryString !== undefined) {
            queryString = '?' + queryString;
        }
        else {
            queryString = '';
        }
        return this.rest.all('storages' + queryString).getList().then(function (storages) {
            return storages;
        });
    };
    // **getList**
    // **@returns** a promise with all storages.
    StorageService.prototype.getList = function () {
        return this.rest.all('storages').getList().then(function (storages) {
            return storages;
        });
    };
    // **getListByCluster**
    // **@returns** a promise  with all storages of the cluster.
    StorageService.prototype.getListByCluster = function (clusterId) {
        return this.rest.one('clusters', clusterId).all('storages').getList().then(function (storages) {
            return storages;
        });
    };
    // **getFilteredListByCluster**
    // **@returns** a promise  with all storages of the cluster with query string.
    StorageService.prototype.getFilteredListByCluster = function (clusterId, queryString) {
        if (queryString !== undefined) {
            queryString = '?' + queryString;
        }
        else {
            queryString = '';
        }
        return this.rest.one('clusters', clusterId).all('storages' + queryString).getList().then(function (storages) {
            return storages;
        });
    };
    // **get**
    // **@returns** a promise with storage metadata.
    StorageService.prototype.get = function (clusterId, storageId) {
        return this.rest.one('clusters', clusterId).one('storages', storageId).get().then(function (storage) {
            return storage;
        });
    };
    // **create**
    // **@param** storage - Information about the storage.
    // **@returns** a promise which returns a request id to track the task.
    StorageService.prototype.create = function (clusterId, storage) {
        return this.restFull.one('clusters', clusterId).all('storages').post(storage);
    };
    // **create**
    // **@param** storageId - Information about the storage.
    // **@returns** a promise which returns a request id to track the task.
    StorageService.prototype.delete = function (clusterId, storageId) {
        return this.restFull.one('clusters', clusterId).one('storages', storageId).remove();
    };
    StorageService.prototype.update = function (clusterId, storageId, pool) {
        return this.restFull.one('clusters', clusterId).one('storages', storageId).patch(pool);
    };
    StorageService.$inject = ['Restangular'];
    return StorageService;
})();
exports.StorageService = StorageService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
