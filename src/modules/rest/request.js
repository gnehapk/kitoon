/// <reference path="../../../typings/tsd.d.ts" />
var RequestService = (function () {
    function RequestService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
        });
    }
    // **getList**
    // **@returns** a promise with list of tasks.
    RequestService.prototype.getList = function (pageNumber, pageSize, taskStatus, from, to, searchMessage) {
        return this.rest.one('tasks').get({
            level: 'root',
            pageNo: pageNumber,
            pageSize: pageSize,
            state: taskStatus,
            fromdatetime: from,
            todatetime: to,
            searchmessage: searchMessage
        }).then(function (tasks) {
            return tasks;
        });
    };
    // **get**
    // **@returns** a promise with the task.
    RequestService.prototype.get = function (id) {
        return this.rest.one('tasks', id).get().then(function (task) {
            return task;
        });
    };
    // **getSubTasks**
    // **@returns** a promise with list of subtasks.
    RequestService.prototype.getSubTasks = function (id) {
        return this.rest.one('tasks', id).getList('subtasks').then(function (task) {
            return task;
        });
    };
    RequestService.$inject = ['Restangular'];
    return RequestService;
})();
exports.RequestService = RequestService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdC9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbIlJlcXVlc3RTZXJ2aWNlIiwiUmVxdWVzdFNlcnZpY2UuY29uc3RydWN0b3IiLCJSZXF1ZXN0U2VydmljZS5nZXRMaXN0IiwiUmVxdWVzdFNlcnZpY2UuZ2V0IiwiUmVxdWVzdFNlcnZpY2UuZ2V0U3ViVGFza3MiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFrRDtBQUVsRDtJQUdJQSx3QkFBWUEsSUFBNkJBO1FBQ3JDQyxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFDQSxxQkFBcUJBO1lBQzlDQSxxQkFBcUJBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBQ2pEQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVERCxjQUFjQTtJQUNkQSw2Q0FBNkNBO0lBQzdDQSxnQ0FBT0EsR0FBUEEsVUFBUUEsVUFBVUEsRUFBRUEsUUFBUUEsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsRUFBRUEsRUFBRUEsYUFBYUE7UUFDN0RFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBO1lBQzlCQSxLQUFLQSxFQUFFQSxNQUFNQTtZQUNiQSxNQUFNQSxFQUFFQSxVQUFVQTtZQUNsQkEsUUFBUUEsRUFBRUEsUUFBUUE7WUFDbEJBLEtBQUtBLEVBQUVBLFVBQVVBO1lBQ2pCQSxZQUFZQSxFQUFFQSxJQUFJQTtZQUNsQkEsVUFBVUEsRUFBRUEsRUFBRUE7WUFDZEEsYUFBYUEsRUFBRUEsYUFBYUE7U0FDL0JBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVNBLEtBQUtBO1lBQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVERixVQUFVQTtJQUNWQSx3Q0FBd0NBO0lBQ3hDQSw0QkFBR0EsR0FBSEEsVUFBSUEsRUFBRUE7UUFDRkcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBU0EsSUFBSUE7WUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURILGtCQUFrQkE7SUFDbEJBLGdEQUFnREE7SUFDaERBLG9DQUFXQSxHQUFYQSxVQUFZQSxFQUFFQTtRQUNWSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxJQUFJQTtZQUNwRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFyQ01KLHNCQUFPQSxHQUFrQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUFzQ3BEQSxxQkFBQ0E7QUFBREEsQ0F4Q0EsQUF3Q0NBLElBQUE7QUF4Q1ksc0JBQWMsaUJBd0MxQixDQUFBIiwiZmlsZSI6Im1vZHVsZXMvcmVzdC9yZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5leHBvcnQgY2xhc3MgUmVxdWVzdFNlcnZpY2Uge1xuICAgIHJlc3Q6IHJlc3Rhbmd1bGFyLklTZXJ2aWNlO1xuICAgIHN0YXRpYyAkaW5qZWN0OiBBcnJheTxzdHJpbmc+ID0gWydSZXN0YW5ndWxhciddO1xuICAgIGNvbnN0cnVjdG9yKHJlc3Q6IHJlc3Rhbmd1bGFyLklDb2xsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Qud2l0aENvbmZpZygoUmVzdGFuZ3VsYXJDb25maWd1cmVyKSA9PiB7XG4gICAgICAgICAgICBSZXN0YW5ndWxhckNvbmZpZ3VyZXIuc2V0QmFzZVVybCgnL2FwaS92MS8nKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggbGlzdCBvZiB0YXNrcy5cbiAgICBnZXRMaXN0KHBhZ2VOdW1iZXIsIHBhZ2VTaXplLCB0YXNrU3RhdHVzLCBmcm9tLCB0bywgc2VhcmNoTWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0Lm9uZSgndGFza3MnKS5nZXQoe1xuICAgICAgICAgICAgbGV2ZWw6ICdyb290JyxcbiAgICAgICAgICAgIHBhZ2VObzogcGFnZU51bWJlcixcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgICAgIHN0YXRlOiB0YXNrU3RhdHVzLFxuICAgICAgICAgICAgZnJvbWRhdGV0aW1lOiBmcm9tLFxuICAgICAgICAgICAgdG9kYXRldGltZTogdG8sXG4gICAgICAgICAgICBzZWFyY2htZXNzYWdlOiBzZWFyY2hNZXNzYWdlXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odGFza3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrcztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXQqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCB0aGUgdGFzay5cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ3Rhc2tzJywgaWQpLmdldCgpLnRoZW4oZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqZ2V0U3ViVGFza3MqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCBsaXN0IG9mIHN1YnRhc2tzLlxuICAgIGdldFN1YlRhc2tzKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3Qub25lKCd0YXNrcycsIGlkKS5nZXRMaXN0KCdzdWJ0YXNrcycpLnRoZW4oZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
