/// <reference path="../../../typings/tsd.d.ts" />
(function (ClusterState) {
    ClusterState[ClusterState["CREATING"] = 0] = "CREATING";
    ClusterState[ClusterState["FAILED"] = 1] = "FAILED";
    ClusterState[ClusterState["ACTIVE"] = 2] = "ACTIVE";
    ClusterState[ClusterState["UNMANAGED"] = 3] = "UNMANAGED"; //3
})(exports.ClusterState || (exports.ClusterState = {}));
var ClusterState = exports.ClusterState;
(function (ClusterStatus) {
    ClusterStatus[ClusterStatus["OK"] = 0] = "OK";
    ClusterStatus[ClusterStatus["WARNING"] = 1] = "WARNING";
    ClusterStatus[ClusterStatus["ERROR"] = 2] = "ERROR";
    ClusterStatus[ClusterStatus["UNKNOWN"] = 3] = "UNKNOWN"; //3
})(exports.ClusterStatus || (exports.ClusterStatus = {}));
var ClusterStatus = exports.ClusterStatus;
var ClusterService = (function () {
    function ClusterService(rest, $q, serverSvc) {
        this.$q = $q;
        this.serverSvc = serverSvc;
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getClusterSummary**
    // **@returns** a promise with all details of cluster dashboard.
    ClusterService.prototype.getClusterSummary = function (cluster_id) {
        return this.rest.one('clusters/' + cluster_id + '/summary').get().then(function (summary) {
            return summary;
        });
    };
    // **getFilteredList**
    // **@returns** a promise with a list of all the clusters with query string.
    ClusterService.prototype.getFilteredList = function (queryString) {
        return this.rest.all('clusters?' + queryString).getList();
    };
    // **getList**
    // **@returns** a promise with a list of all the clusters.
    ClusterService.prototype.getList = function () {
        return this.rest.all('clusters').getList();
    };
    // **getAlerts**
    // **@returns** a promise with all cluster's alerts.
    ClusterService.prototype.getAlerts = function (cluster_id) {
        return this.rest.all('events?cluster_id=' + cluster_id).getList().then(function (alerts) {
            return alerts;
        });
    };
    // **getCapacity**
    // **@returns** a promise with the cluster capacity for the specific
    // cluster based on it's id.
    ClusterService.prototype.getCapacity = function (id) {
        return this.serverSvc.getListByCluster(id).then(function (nodes) {
            var capacity = 0;
            _.each(nodes, function (node) {
                var size = _.reduce(node.storage_disks, function (size, device) {
                    return device.Type === 'disk' ? device.Size + size : size;
                }, 0);
                capacity = capacity + size;
            });
            return capacity;
        });
    };
    // **enable**
    // **@param** id - id of the cluster
    // **@returns** a promise with the request id for the operation.
    ClusterService.prototype.enable = function (id) {
        return this.rest.one('clusters', id).post('manage');
    };
    // **disable**
    // **@param** id - id of the cluster
    // **@returns** a promise with the request id for the operation.
    ClusterService.prototype.disable = function (id) {
        return this.rest.one('clusters', id).post('unmanage');
    };
    // **remove**
    // **@param** id - id of cluster you wish to remove.
    // This is a **destructive** operation and will remove
    // any data on this cluster.
    // **@returns** a promise with the request id for the operation.
    ClusterService.prototype.remove = function (id) {
        return this.rest.one('clusters', id).remove();
    };
    // **get**
    // **@returns** a promise with the cluster metadata for the specific
    // cluster based on it's id.
    ClusterService.prototype.get = function (id) {
        return this.rest.one('clusters', id).get();
    };
    // **getByName**
    // **@returns** a promise with the cluster metadata for the specific
    // cluster based on it's name.
    ClusterService.prototype.getByName = function (name) {
        return this.getList().then(function (clusters) {
            return _.find(clusters, function (cluster) {
                return cluster.name === name;
            });
        });
    };
    // **create**
    // **@param** cluster - Information about the cluster and list of hosts.
    // **@returns** a promise which returns a request id to track the task.
    ClusterService.prototype.create = function (cluster) {
        return this.restFull.all('clusters').post(cluster);
    };
    // **expand**
    // **@param** cluster - Information about the cluster and list of hosts.
    // **@returns** a promise which returns a request id to track the task.
    ClusterService.prototype.expand = function (clusterId, cluster) {
        return this.restFull.one('clusters', clusterId).post('expand', cluster);
    };
    // **getSlus**
    // **@returns** a promise with all slus of the cluster.
    ClusterService.prototype.getSlus = function (clusterId) {
        return this.rest.one('clusters', clusterId).all('slus').getList().then(function (slus) {
            return slus;
        });
    };
    // **slusAction**
    // **@returns** a promise with response of the slus's action.
    ClusterService.prototype.slusAction = function (clusterId, slusId, action) {
        return this.restFull.one('clusters', clusterId).one('slus', slusId).patch(action);
    };
    // **getClusterOverallUtilization**
    // **@returns** a promise with Overall Utilization across all the nodes in system.
    ClusterService.prototype.getClusterOverallUtilization = function (clusterId) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=cluster_utilization.percent-used').getList().then(function (overall_utilization) {
            return overall_utilization;
        });
    };
    // **getClusterCpuUtilization**
    // **@returns** a promise with cluster's cpu utilization.
    ClusterService.prototype.getClusterCpuUtilization = function (clusterId, time_slot) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=cpu-user-cpu-system&duration=' + time_slot).getList().then(function (cpu_utilization) {
            return cpu_utilization;
        });
    };
    // **getClusterMemoryUtilization**
    // **@returns** a promise with cluster's memory utilization.
    ClusterService.prototype.getClusterMemoryUtilization = function (clusterId, time_slot) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=memory-usage_percent&duration=' + time_slot).getList().then(function (memory_utilization) {
            return memory_utilization;
        });
    };
    // **getIOPS**
    // **@returns** a promise with disks IOPS?.
    ClusterService.prototype.getIOPS = function (clusterId, time_slot) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=disk-read_write&duration=' + time_slot).getList().then(function (iops) {
            return iops;
        });
    };
    // **getIOPSBy**
    // **@returns** a promise with disks IOPS?.
    ClusterService.prototype.getIOPSById = function (cluster_id, time_slot) {
        return this.rest.all('monitoring/cluster/' + cluster_id + '/utilization?resource=disk-read_write&duration=' + time_slot).getList().then(function (iops) {
            return iops;
        });
    };
    // **getThroughput**
    // **@returns** a promise with network throughput.
    ClusterService.prototype.getThroughput = function (clusterId, time_slot) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=interface-rx_tx&duration=' + time_slot).getList().then(function (throughput) {
            return throughput;
        });
    };
    // **getNetworkLatency**
    // **@returns** a promise with network latency.
    ClusterService.prototype.getNetworkLatency = function (clusterId, time_slot) {
        return this.rest.all('monitoring/cluster/' + clusterId + '/utilization?resource=network_latency&duration=' + time_slot).getList().then(function (network_latency) {
            return network_latency;
        });
    };
    // **getClusterConfig**
    // **@returns** a promise with cluster configuration details.
    ClusterService.prototype.getClusterConfig = function (clusterId) {
        return this.rest.one('clusters/' + clusterId + '/config').get().then(function (cluster_config) {
            return cluster_config;
        });
    };
    // **getImportClusterDeatils
    // **@returns** A promise with Ceph Cluster Information for importing
    ClusterService.prototype.getImportClusterDeatils = function (monNode) {
        return this.restFull.one('/nodesforimport?bootstrapnode=' + monNode + "&clustertype=ceph").get();
    };
    ClusterService.prototype.importCephCluster = function (bootStrapInfo) {
        return this.restFull.all('importcluster').post(bootStrapInfo);
    };
    ClusterService.$inject = ['Restangular', '$q', 'ServerService'];
    return ClusterService;
})();
exports.ClusterService = ClusterService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
