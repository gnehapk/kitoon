/// <reference path="../../../typings/tsd.d.ts" />
var PoolService = (function () {
    function PoolService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/ceph/');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1/ceph/');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getList**
    // **@returns** a promise with all pools.
    PoolService.prototype.getList = function () {
        return this.rest.all('pools').getList().then(function (osds) {
            return osds;
        });
    };
    // **getListByCluster
    // **@returns** a promise with all pools of the cluster.
    PoolService.prototype.getListByCluster = function (clusterId) {
        return this.rest.all('pools').getList().then(function (pools) {
            return _.filter(pools, function (pool) {
                return pool.cluster === clusterId;
            });
        });
    };
    // **get**
    // **@returns** a promise with pool metadata.
    PoolService.prototype.get = function (id) {
        return this.rest.one('pools', id).get().then(function (pool) {
            return pool;
        });
    };
    // **create**
    // **@param** osds - Information about the list of pools.
    // **@returns** a promise which returns a request id to track the task.
    PoolService.prototype.create = function (pools) {
        return this.restFull.all('pools').post(pools);
    };
    PoolService.$inject = ['Restangular'];
    return PoolService;
})();
exports.PoolService = PoolService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdC9wb29sLnRzIl0sIm5hbWVzIjpbIlBvb2xTZXJ2aWNlIiwiUG9vbFNlcnZpY2UuY29uc3RydWN0b3IiLCJQb29sU2VydmljZS5nZXRMaXN0IiwiUG9vbFNlcnZpY2UuZ2V0TGlzdEJ5Q2x1c3RlciIsIlBvb2xTZXJ2aWNlLmdldCIsIlBvb2xTZXJ2aWNlLmNyZWF0ZSJdLCJtYXBwaW5ncyI6IkFBQUEsa0RBQWtEO0FBRWxEO0lBSUlBLHFCQUFZQSxJQUE0QkE7UUFDcENDLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQUNBLHFCQUFxQkE7WUFDOUNBLHFCQUFxQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFDdERBLENBQUNBLENBQUNBLENBQUNBO1FBQ0hBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQUNBLHFCQUFxQkE7WUFDbERBLHFCQUFxQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7WUFDbERBLHFCQUFxQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDaERBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURELGNBQWNBO0lBQ2RBLHlDQUF5Q0E7SUFDekNBLDZCQUFPQSxHQUFQQTtRQUNJRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxJQUFJQTtZQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREYscUJBQXFCQTtJQUNyQkEsd0RBQXdEQTtJQUN4REEsc0NBQWdCQSxHQUFoQkEsVUFBaUJBLFNBQVNBO1FBQ3RCRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxLQUFLQTtZQUN2RCxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBUyxJQUFJO2dCQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7WUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURILFVBQVVBO0lBQ1ZBLDZDQUE2Q0E7SUFDN0NBLHlCQUFHQSxHQUFIQSxVQUFJQSxFQUFFQTtRQUNGSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxJQUFJQTtZQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREosYUFBYUE7SUFDYkEseURBQXlEQTtJQUN6REEsdUVBQXVFQTtJQUN2RUEsNEJBQU1BLEdBQU5BLFVBQU9BLEtBQUtBO1FBQ1JLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQTFDTUwsbUJBQU9BLEdBQWtCQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQTRDcERBLGtCQUFDQTtBQUFEQSxDQS9DQSxBQStDQ0EsSUFBQTtBQS9DWSxtQkFBVyxjQStDdkIsQ0FBQSIsImZpbGUiOiJtb2R1bGVzL3Jlc3QvcG9vbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuZXhwb3J0IGNsYXNzIFBvb2xTZXJ2aWNlIHtcbiAgICByZXN0OiByZXN0YW5ndWxhci5JU2VydmljZTtcbiAgICByZXN0RnVsbDogcmVzdGFuZ3VsYXIuSVNlcnZpY2U7XG4gICAgc3RhdGljICRpbmplY3Q6IEFycmF5PHN0cmluZz4gPSBbJ1Jlc3Rhbmd1bGFyJ107XG4gICAgY29uc3RydWN0b3IocmVzdDpyZXN0YW5ndWxhci5JQ29sbGVjdGlvbikge1xuICAgICAgICB0aGlzLnJlc3QgPSByZXN0LndpdGhDb25maWcoKFJlc3Rhbmd1bGFyQ29uZmlndXJlcikgPT4ge1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEJhc2VVcmwoJy9hcGkvdjEvY2VwaC8nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzdEZ1bGwgPSByZXN0LndpdGhDb25maWcoKFJlc3Rhbmd1bGFyQ29uZmlndXJlcikgPT4ge1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEJhc2VVcmwoJy9hcGkvdjEvY2VwaC8nKTtcbiAgICAgICAgICAgIFJlc3Rhbmd1bGFyQ29uZmlndXJlci5zZXRGdWxsUmVzcG9uc2UodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqZ2V0TGlzdCoqXG4gICAgLy8gKipAcmV0dXJucyoqIGEgcHJvbWlzZSB3aXRoIGFsbCBwb29scy5cbiAgICBnZXRMaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0LmFsbCgncG9vbHMnKS5nZXRMaXN0KCkudGhlbihmdW5jdGlvbihvc2RzKSB7XG4gICAgICAgICAgICByZXR1cm4gb3NkcztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRMaXN0QnlDbHVzdGVyXG4gICAgLy8gKipAcmV0dXJucyoqIGEgcHJvbWlzZSB3aXRoIGFsbCBwb29scyBvZiB0aGUgY2x1c3Rlci5cbiAgICBnZXRMaXN0QnlDbHVzdGVyKGNsdXN0ZXJJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0LmFsbCgncG9vbHMnKS5nZXRMaXN0KCkudGhlbihmdW5jdGlvbihwb29scykge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHBvb2xzLCBmdW5jdGlvbihwb29sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvb2wuY2x1c3RlciA9PT0gY2x1c3RlcklkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqZ2V0KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggcG9vbCBtZXRhZGF0YS5cbiAgICBnZXQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ3Bvb2xzJywgaWQpLmdldCgpLnRoZW4oZnVuY3Rpb24ocG9vbCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvb2w7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqY3JlYXRlKipcbiAgICAvLyAqKkBwYXJhbSoqIG9zZHMgLSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbGlzdCBvZiBwb29scy5cbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdoaWNoIHJldHVybnMgYSByZXF1ZXN0IGlkIHRvIHRyYWNrIHRoZSB0YXNrLlxuICAgIGNyZWF0ZShwb29scykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0RnVsbC5hbGwoJ3Bvb2xzJykucG9zdChwb29scyk7XG4gICAgfVxuXG59XG4iXX0=
