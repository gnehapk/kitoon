/// <reference path="../../../typings/tsd.d.ts" />
var UtilService = (function () {
    function UtilService(rest) {
        this.rest = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1');
        });
        this.restFull = rest.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer.setBaseUrl('/api/v1');
            RestangularConfigurer.setFullResponse(true);
        });
    }
    // **getVerify**
    // **@returns** a promise with user varification.
    UtilService.prototype.getVerifyUser = function (userObject) {
        return this.rest.all('auth/login').post(userObject);
    };
    // **getVerify**
    // **@returns** a promise with host varification.
    UtilService.prototype.getVerifyHost = function (hostObject) {
        return this.rest.all('utils/validate-host').post(hostObject);
    };
    // **getList**
    // **@returns** a promise with ssh fingerprint.
    UtilService.prototype.getSshFingerprint = function (hostname) {
        return this.rest.one('utils/ssh_fingerprint', hostname).get().then(function (result) {
            return result.sshfingerprint;
        });
    };
    // **get**
    // **@returns** a promise with IP Addresses.
    UtilService.prototype.getIpAddresses = function (hostname) {
        return this.rest.one('utils/lookup_node', hostname).get().then(function (result) {
            return result;
        });
    };
    // **acceptHost**
    // **@returns** accept the salt-key of the node.
    UtilService.prototype.acceptHost = function (hostname, saltfingerprint) {
        return this.restFull.one('unmanaged_nodes', hostname).post('accept', saltfingerprint);
    };
    UtilService.$inject = ['Restangular'];
    return UtilService;
})();
exports.UtilService = UtilService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvcmVzdC91dGlsLnRzIl0sIm5hbWVzIjpbIlV0aWxTZXJ2aWNlIiwiVXRpbFNlcnZpY2UuY29uc3RydWN0b3IiLCJVdGlsU2VydmljZS5nZXRWZXJpZnlVc2VyIiwiVXRpbFNlcnZpY2UuZ2V0VmVyaWZ5SG9zdCIsIlV0aWxTZXJ2aWNlLmdldFNzaEZpbmdlcnByaW50IiwiVXRpbFNlcnZpY2UuZ2V0SXBBZGRyZXNzZXMiLCJVdGlsU2VydmljZS5hY2NlcHRIb3N0Il0sIm1hcHBpbmdzIjoiQUFBQSxrREFBa0Q7QUFFbEQ7SUFLSUEscUJBQVlBLElBQTRCQTtRQUNyQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtZQUM3Q0EscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSEEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsVUFBQ0EscUJBQXFCQTtZQUNsREEscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUM1Q0EscUJBQXFCQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREQsZ0JBQWdCQTtJQUNoQkEsaURBQWlEQTtJQUNqREEsbUNBQWFBLEdBQWJBLFVBQWNBLFVBQVVBO1FBQ3BCRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUN4REEsQ0FBQ0E7SUFFREYsZ0JBQWdCQTtJQUNoQkEsaURBQWlEQTtJQUNqREEsbUNBQWFBLEdBQWJBLFVBQWNBLFVBQVVBO1FBQ3BCRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO0lBQ2pFQSxDQUFDQTtJQUVESCxjQUFjQTtJQUNkQSwrQ0FBK0NBO0lBQy9DQSx1Q0FBaUJBLEdBQWpCQSxVQUFrQkEsUUFBUUE7UUFDdEJJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLHVCQUF1QkEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBU0EsTUFBTUE7WUFDOUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDakMsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVESixVQUFVQTtJQUNWQSw0Q0FBNENBO0lBQzVDQSxvQ0FBY0EsR0FBZEEsVUFBZUEsUUFBZ0JBO1FBQzNCSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxtQkFBbUJBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLFVBQVNBLE1BQXFCQTtZQUN6RixNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREwsaUJBQWlCQTtJQUNqQkEsZ0RBQWdEQTtJQUNoREEsZ0NBQVVBLEdBQVZBLFVBQVdBLFFBQWdCQSxFQUFFQSxlQUE0Q0E7UUFDckVNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLGlCQUFpQkEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7SUFDMUZBLENBQUNBO0lBM0NNTixtQkFBT0EsR0FBa0JBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO0lBNENwREEsa0JBQUNBO0FBQURBLENBaERBLEFBZ0RDQSxJQUFBO0FBaERZLG1CQUFXLGNBZ0R2QixDQUFBIiwiZmlsZSI6Im1vZHVsZXMvcmVzdC91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5leHBvcnQgY2xhc3MgVXRpbFNlcnZpY2Uge1xuICAgIGNvbmZpZzogQXJyYXk8YW55PjtcbiAgICByZXN0OiByZXN0YW5ndWxhci5JU2VydmljZTtcbiAgICByZXN0RnVsbDogcmVzdGFuZ3VsYXIuSVNlcnZpY2U7XG4gICAgc3RhdGljICRpbmplY3Q6IEFycmF5PHN0cmluZz4gPSBbJ1Jlc3Rhbmd1bGFyJ107XG4gICAgY29uc3RydWN0b3IocmVzdDpyZXN0YW5ndWxhci5JQ29sbGVjdGlvbikge1xuICAgICAgIHRoaXMucmVzdCA9IHJlc3Qud2l0aENvbmZpZygoUmVzdGFuZ3VsYXJDb25maWd1cmVyKSA9PiB7XG4gICAgICAgICAgICBSZXN0YW5ndWxhckNvbmZpZ3VyZXIuc2V0QmFzZVVybCgnL2FwaS92MScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXN0RnVsbCA9IHJlc3Qud2l0aENvbmZpZygoUmVzdGFuZ3VsYXJDb25maWd1cmVyKSA9PiB7XG4gICAgICAgICAgICBSZXN0YW5ndWxhckNvbmZpZ3VyZXIuc2V0QmFzZVVybCgnL2FwaS92MScpO1xuICAgICAgICAgICAgUmVzdGFuZ3VsYXJDb25maWd1cmVyLnNldEZ1bGxSZXNwb25zZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXRWZXJpZnkqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCB1c2VyIHZhcmlmaWNhdGlvbi5cbiAgICBnZXRWZXJpZnlVc2VyKHVzZXJPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5hbGwoJ2F1dGgvbG9naW4nKS5wb3N0KHVzZXJPYmplY3QpO1xuICAgIH1cblxuICAgIC8vICoqZ2V0VmVyaWZ5KipcbiAgICAvLyAqKkByZXR1cm5zKiogYSBwcm9taXNlIHdpdGggaG9zdCB2YXJpZmljYXRpb24uXG4gICAgZ2V0VmVyaWZ5SG9zdChob3N0T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3QuYWxsKCd1dGlscy92YWxpZGF0ZS1ob3N0JykucG9zdChob3N0T2JqZWN0KTtcbiAgICB9XG5cbiAgICAvLyAqKmdldExpc3QqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCBzc2ggZmluZ2VycHJpbnQuXG4gICAgZ2V0U3NoRmluZ2VycHJpbnQoaG9zdG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdC5vbmUoJ3V0aWxzL3NzaF9maW5nZXJwcmludCcsIGhvc3RuYW1lKS5nZXQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5zc2hmaW5nZXJwcmludDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gKipnZXQqKlxuICAgIC8vICoqQHJldHVybnMqKiBhIHByb21pc2Ugd2l0aCBJUCBBZGRyZXNzZXMuXG4gICAgZ2V0SXBBZGRyZXNzZXMoaG9zdG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0Lm9uZSgndXRpbHMvbG9va3VwX25vZGUnLCBob3N0bmFtZSkuZ2V0KCkudGhlbihmdW5jdGlvbihyZXN1bHQ6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vICoqYWNjZXB0SG9zdCoqXG4gICAgLy8gKipAcmV0dXJucyoqIGFjY2VwdCB0aGUgc2FsdC1rZXkgb2YgdGhlIG5vZGUuXG4gICAgYWNjZXB0SG9zdChob3N0bmFtZTogc3RyaW5nLCBzYWx0ZmluZ2VycHJpbnQ6IHsgc2FsdGZpbmdlcnByaW50OiBzdHJpbmcgfSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN0RnVsbC5vbmUoJ3VubWFuYWdlZF9ub2RlcycsIGhvc3RuYW1lKS5wb3N0KCdhY2NlcHQnLCBzYWx0ZmluZ2VycHJpbnQpO1xuICAgIH1cbn1cblxuIl19
