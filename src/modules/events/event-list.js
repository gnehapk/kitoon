// <reference path="../../../typings/tsd.d.ts" />
var EventListController = (function () {
    function EventListController($scope, $interval, $location, modalSvc, eventSvc) {
        var _this = this;
        this.$scope = $scope;
        this.$interval = $interval;
        this.$location = $location;
        this.modalSvc = modalSvc;
        this.eventSvc = eventSvc;
        this.pageNo = 1;
        this.pageSize = 10;
        this.totalPages = 1;
        this.totalCount = 0;
        this.filterObject = {};
        this.requestObject = {};
        this.searchEntity = "Description";
        this.warningCount = 0;
        this.criticalCount = 0;
        this.errorMessage = "";
        this.severityLevel = [];
        this.statusFilter = "active";
        this.alarmStatus = ["indeterminate",
            "critical",
            "major",
            "minor",
            "warning",
            "info"];
        this.criticalEvents = [this.alarmStatus[1], this.alarmStatus[2]];
        this.warningEvents = [this.alarmStatus[0], this.alarmStatus[3], this.alarmStatus[4]];
        var queryParams = $location.search();
        if (Object.keys(queryParams).length > 0) {
            if (queryParams['searchmessage'] !== undefined) {
                this.searchQuery = queryParams['searchmessage'];
                this.searchEntity = "description";
            }
            else if (queryParams['nodename'] !== undefined) {
                this.searchQuery = queryParams['nodename'];
                this.searchEntity = "host";
            }
            else if (queryParams['clustername'] !== undefined) {
                this.searchQuery = queryParams['clustername'];
                this.searchEntity = "cluster";
            }
            this.applyFilter(this.searchEntity, this.searchQuery);
            this.applyFilter('severity', 'critical & warning');
            this.severity = 'notok';
        }
        this.timer = this.$interval(function () { return _this.refresh(); }, 5000);
        this.$scope.$on('$destroy', function () {
            _this.$interval.cancel(_this.timer);
        });
        this.filterObject['status'] = this.statusFilter;
        this.refresh();
    }
    EventListController.prototype.refresh = function () {
        var _this = this;
        if (this.severity === 'critical') {
            this.severityLevel = this.criticalEvents;
        }
        else if (this.severity === 'warning') {
            this.severityLevel = this.warningEvents;
        }
        else if (this.severity === 'notok') {
            this.severityLevel = this.criticalEvents;
            this.severityLevel = this.severityLevel.concat(this.warningEvents);
        }
        else {
            this.severityLevel = [];
        }
        this.requestObject = {
            pageno: this.pageNo,
            pagesize: this.pageSize,
            fromdatetime: this.fromDateTimeFilter,
            todatetime: this.toDateTimeFilter,
            severity: this.severityLevel
        };
        if (this.searchEntity.toLowerCase() === 'cluster') {
            this.requestObject['clustername'] = this.searchQuery;
        }
        else if (this.searchEntity.toLowerCase() === 'host') {
            this.requestObject['nodename'] = this.searchQuery;
        }
        else if (this.searchEntity.toLowerCase() === 'description') {
            this.requestObject['searchmessage'] = this.searchQuery;
        }
        if (this.statusFilter === "active") {
            this.requestObject['acked'] = false;
        }
        if (this.statusFilter === "dismissed") {
            this.requestObject['acked'] = true;
        }
        if (this.statusFilter === "both") {
            delete this.requestObject['acked'];
        }
        this.eventSvc.getList(this.requestObject).then(function (data) {
            _this.totalCount = data.totalcount;
            _this.totalPages = Math.ceil(data.totalcount / _this.pageSize);
            _this.list = data.events;
        });
        this.requestObject['pageno'] = 1;
        this.requestObject['severity'] = this.criticalEvents;
        this.eventSvc.getList(this.requestObject).then(function (data) {
            _this.criticalCount = data.totalcount;
        });
        this.requestObject['severity'] = this.warningEvents;
        this.eventSvc.getList(this.requestObject).then(function (data) {
            _this.warningCount = data.totalcount;
        });
    };
    EventListController.prototype.paginate = function (pageNo) {
        if (pageNo < 1 || pageNo > this.totalPages)
            return;
        this.pageNo = pageNo;
        this.refresh();
    };
    EventListController.prototype.viewDetails = function (eventId) {
        this.$location.path('/events/' + eventId);
    };
    EventListController.prototype.resetFilters = function () {
        this.filterObject = {};
        this.fromDateTimeFilter = undefined;
        this.toDateTimeFilter = undefined;
        this.searchQuery = undefined;
        this.severity = undefined;
        this.statusFilter = "active";
        this.filterObject['status'] = this.statusFilter;
    };
    EventListController.prototype.applyFilter = function (key, value) {
        if (value.length === 0) {
            delete this.filterObject[key];
        }
        else {
            this.filterObject[key] = value;
        }
        this.refresh();
    };
    EventListController.prototype.clearFilter = function (key) {
        delete this.filterObject[key];
        this.fromDateTimeFilter = this.filterObject["from"];
        this.toDateTimeFilter = this.filterObject["to"];
        this.searchQuery = this.filterObject[this.searchEntity];
        this.severity = this.filterObject["severity"];
    };
    EventListController.prototype.setSearchEntity = function (entity) {
        this.searchQuery = "";
        this.searchEntity = entity;
        delete this.filterObject['cluster'];
        delete this.filterObject['host'];
        delete this.filterObject['description'];
    };
    EventListController.prototype.dismiss = function (eventId) {
        var modalInstance = this.modalSvc({
            templateUrl: 'views/events/event-dismiss.tpl.html',
            controllerAs: 'event',
            controller: ['EventService', 'growl', function (eventSvc, growl) {
                    this.dismissMessage = "";
                    this.errorMessage = "";
                    this.dismiss = function () {
                        var _this = this;
                        eventSvc.dismiss(eventId, this.dismissMessage).then(function (status) {
                            modalInstance.$scope.$hide();
                            growl.success("Event Dismissed");
                        }).catch(function (status) {
                            _this.errorMessage = status.data;
                            growl.error(status.data);
                        });
                    };
                }]
        });
    };
    EventListController.$inject = [
        '$scope',
        '$interval',
        '$location',
        '$modal',
        'EventService'
    ];
    return EventListController;
})();
exports.EventListController = EventListController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
